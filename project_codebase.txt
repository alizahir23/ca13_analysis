
================================================================================
File: requirements.txt
================================================================================

anyio==4.6.2.post1
appnope==0.1.4
argon2-cffi==23.1.0
argon2-cffi-bindings==21.2.0
arrow==1.3.0
asttokens==2.4.1
async-lru==2.0.4
attrs==24.2.0
babel==2.16.0
beautifulsoup4==4.12.3
bleach==6.2.0
certifi==2024.8.30
cffi==1.17.1
charset-normalizer==3.4.0
comm==0.2.2
contourpy==1.3.0
cycler==0.12.1
debugpy==1.8.7
decorator==5.1.1
defusedxml==0.7.1
et_xmlfile==2.0.0
executing==2.1.0
fastjsonschema==2.20.0
fonttools==4.54.1
fqdn==1.5.1
geopandas==1.0.1
h11==0.14.0
httpcore==1.0.6
httpx==0.27.2
idna==3.10
ipykernel==6.29.5
ipython==8.29.0
isoduration==20.11.0
jedi==0.19.1
Jinja2==3.1.4
joblib==1.4.2
json5==0.9.25
jsonpointer==3.0.0
jsonschema==4.23.0
jsonschema-specifications==2024.10.1
jupyter-events==0.10.0
jupyter-lsp==2.2.5
jupyter_client==8.6.3
jupyter_core==5.7.2
jupyter_server==2.14.2
jupyter_server_terminals==0.5.3
jupyterlab==4.2.5
jupyterlab_pygments==0.3.0
jupyterlab_server==2.27.3
kiwisolver==1.4.7
MarkupSafe==3.0.2
matplotlib==3.9.2
matplotlib-inline==0.1.7
mistune==3.0.2
nbclient==0.10.0
nbconvert==7.16.4
nbformat==5.10.4
nest-asyncio==1.6.0
notebook_shim==0.2.4
numpy==2.1.2
openpyxl==3.1.5
overrides==7.7.0
packaging==24.1
pandas==2.2.3
pandocfilters==1.5.1
parso==0.8.4
pexpect==4.9.0
pillow==11.0.0
platformdirs==4.3.6
prometheus_client==0.21.0
prompt_toolkit==3.0.48
psutil==6.1.0
ptyprocess==0.7.0
pure_eval==0.2.3
pycparser==2.22
Pygments==2.18.0
pyogrio==0.10.0
pyparsing==3.2.0
pyproj==3.7.0
python-dateutil==2.9.0.post0
python-json-logger==2.0.7
pytz==2024.2
PyYAML==6.0.2
pyzmq==26.2.0
referencing==0.35.1
requests==2.32.3
rfc3339-validator==0.1.4
rfc3986-validator==0.1.1
rpds-py==0.20.0
scikit-learn==1.5.2
scipy==1.14.1
seaborn==0.13.2
Send2Trash==1.8.3
shapely==2.0.6
six==1.16.0
sniffio==1.3.1
soupsieve==2.6
stack-data==0.6.3
terminado==0.18.1
threadpoolctl==3.5.0
tinycss2==1.4.0
tornado==6.4.1
traitlets==5.14.3
types-python-dateutil==2.9.0.20241003
typing_extensions==4.12.2
tzdata==2024.2
uri-template==1.3.0
urllib3==2.2.3
wcwidth==0.2.13
webcolors==24.8.0
webencodings==0.5.1
websocket-client==1.8.0



================================================================================
File: ca13-initial-setup.py
================================================================================

from pathlib import Path
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

class CA13Analyzer:
    def __init__(self):
        """Initialize the CA-13 District Analyzer"""
        self.project_dir = Path.cwd()
        self.data_dir = self.project_dir / 'data'
        self.ensure_directories()
        
        # Data storage
        self.district_boundary = None
        self.precinct_data = None
        self.census_data = None
        self.election_data = None
        
    def ensure_directories(self):
        """Ensure necessary directories exist"""
        directories = ['data', 'notebooks', 'src']
        for directory in directories:
            dir_path = self.project_dir / directory
            dir_path.mkdir(exist_ok=True)
            
    def download_required_data(self):
        """Provide instructions for downloading required datasets"""
        print("Please download the following datasets:")
        print("\n1. CA-13 District Boundary:")
        print("   - Visit: https://redistrictingdatahub.org")
        print("   - Search for: California Congressional Districts")
        print("   - Download the shapefile for CA-13")
        print("   - Save to: data/district_boundary/")
        
        print("\n2. Census Data:")
        print("   - Visit: https://www.census.gov/data.html")
        print("   - Download ACS data for CA-13")
        print("   - Save to: data/census/")
        
        print("\n3. Election Data:")
        print("   - Visit: https://www.sos.ca.gov/elections/prior-elections")
        print("   - Download precinct-level results")
        print("   - Save to: data/election/")
    
    def load_district_boundary(self, file_path):
        """Load district boundary shapefile"""
        try:
            self.district_boundary = gpd.read_file(file_path)
            print("Successfully loaded district boundary data")
            return True
        except Exception as e:
            print(f"Error loading district boundary: {e}")
            return False
    
    def load_census_data(self, file_path):
        """Load census data"""
        try:
            self.census_data = pd.read_csv(file_path)
            print("Successfully loaded census data")
            return True
        except Exception as e:
            print(f"Error loading census data: {e}")
            return False
    
    def load_election_data(self, file_path):
        """Load election results data"""
        try:
            self.election_data = pd.read_csv(file_path)
            print("Successfully loaded election data")
            return True
        except Exception as e:
            print(f"Error loading election data: {e}")
            return False
    
    def create_district_map(self):
        """Create a basic map of CA-13"""
        if self.district_boundary is None:
            print("No district boundary data loaded")
            return
        
        fig, ax = plt.subplots(figsize=(12, 8))
        self.district_boundary.plot(ax=ax)
        ax.set_title('California Congressional District 13')
        plt.axis('equal')
        plt.show()
    
    def analyze_demographics(self):
        """Analyze demographic data"""
        if self.census_data is None:
            print("No census data loaded")
            return None
        
        # Basic demographic summary
        demographic_summary = self.census_data.describe()
        return demographic_summary
    
    def analyze_election_results(self):
        """Analyze election results"""
        if self.election_data is None:
            print("No election data loaded")
            return None
        
        # Basic election summary
        election_summary = self.election_data.describe()
        return election_summary

# Example usage
if __name__ == "__main__":
    # Initialize analyzer
    analyzer = CA13Analyzer()
    
    # Show data download instructions
    analyzer.download_required_data()
    
    # Once data is downloaded, you can load and analyze it
    # Example paths (update these with your actual file paths):
    # analyzer.load_district_boundary('data/district_boundary/CA13.shp')
    # analyzer.load_census_data('data/census/ca13_census.csv')
    # analyzer.load_election_data('data/election/ca13_election.csv')
    
    print("\nSetup complete. Ready to begin analysis.")



================================================================================
File: README.md
================================================================================




================================================================================
File: project_codebase.txt
================================================================================




================================================================================
File: collect_codebase.py
================================================================================

import os
from pathlib import Path

def collect_codebase(output_file='project_codebase.txt'):
    """Collect all project files into a single text file."""
    
    # File extensions to include
    EXTENSIONS = {'.py', '.md', '.txt', '.json'}
    
    # Get the project root directory
    project_root = Path(__file__).parent
    
    with open(output_file, 'w') as out:
        # Walk through all directories
        for root, dirs, files in os.walk(project_root):
            # Skip __pycache__ and .git directories
            dirs[:] = [d for d in dirs if d not in ['__pycache__', '.git', 'env', 'venv']]
            
            for file in files:
                file_path = Path(root) / file
                
                # Check if file extension should be included
                if file_path.suffix in EXTENSIONS:
                    # Write file path as header
                    relative_path = file_path.relative_to(project_root)
                    out.write(f"\n{'='*80}\n")
                    out.write(f"File: {relative_path}\n")
                    out.write(f"{'='*80}\n\n")
                    
                    # Write file contents
                    try:
                        with open(file_path, 'r') as f:
                            out.write(f.read())
                        out.write('\n\n')
                    except Exception as e:
                        out.write(f'Error reading file: {e}\n\n')

if __name__ == "__main__":
    collect_codebase()
    print("Codebase collected in project_codebase.txt")


================================================================================
File: data/analysis/CA13_demographic_analysis.txt
================================================================================

CA-13 Congressional District Demographic Analysis
==================================================

Population Statistics:
--------------------
Total Population: 760,065
Citizen Voting Age Population: 393,416
Hispanic CVAP: 197,645
Black (Non-Hispanic) CVAP: 16,042
Asian (Non-Hispanic) CVAP: 24,438
White (Non-Hispanic) CVAP: 145,877

CVAP Demographic Percentages:
--------------------
Hispanic: 50.2%
Black: 4.1%
Asian: 6.2%
White: 37.1%

District Properties:
--------------------
Ideal Value: 760,066
Deviation: -1
Deviation Percentage: -0.00%



================================================================================
File: data/analysis/spatial/detailed_spatial_analysis.md
================================================================================

# CA-13 Detailed Spatial Analysis

## 1. District Geographic Overview

### Location and Boundaries
- Located in Central California
- Part of California's Central Valley region
- Total area: 25781.15 square kilometers

## 2. Precinct-Level Analysis

### Precinct Statistics
- Total number of precincts: 190
- Average precinct size: 2.48 square kilometers

### Voting Patterns
- Democratic-leaning precincts: 177
- Republican-leaning precincts: 2
- Average Democratic vote share: 89.8%

## 3. Geographic Features

### Natural Features
- Situated in California's Central Valley
- Agricultural land use prominent in district
- Mix of urban and rural areas

## 4. Spatial Patterns

### Population Distribution
- Varying population densities across precincts
- Urban clusters identified through precinct sizes
- Rural areas with larger precinct geometries

## 5. Electoral Geography

### Voting Pattern Distribution
- District-wide Democratic vote share: 89.8%
- Highest Democratic precinct share: 100.0%
- Lowest Democratic precinct share: 0.0%

## 6. Key Observations

### Geographic Patterns
1. The district shows clear urban-rural divisions
2. Precinct sizes correlate with population density
3. Voting patterns show geographic clustering
4. Natural features influence district boundaries

## 7. Implications for Representation

### District Characteristics
1. Mixed urban-rural composition affects representation needs
2. Geographic diversity requires balanced policy approach
3. Population distribution influences campaign strategies
4. Precinct-level patterns suggest localized community interests



================================================================================
File: data/analysis/spatial/spatial_analysis_report.json
================================================================================

{
  "title": "CA-13 Spatial Analysis Report",
  "date": "2024-10-31",
  "map_analysis": {
    "state_districts": {
      "total_districts": 52,
      "ca13_location": "Central California",
      "neighboring_districts": [
        "CD 05",
        "CD 09",
        "CD 14",
        "CD 18",
        "CD 20",
        "CD 21",
        "CD 22"
      ],
      "key_features": [
        "Shows CA-13's position within California's congressional district system",
        "Highlights relative size and location of CA-13",
        "Demonstrates relationship with neighboring districts"
      ]
    },
    "district_13": {
      "district_characteristics": [
        "Covers portions of Central Valley",
        "Includes both urban and rural areas",
        "Significant agricultural presence",
        "Major transportation corridors"
      ],
      "geographic_features": [
        "Varied terrain",
        "Important waterways",
        "Agricultural lands",
        "Urban centers"
      ]
    },
    "precincts": {
      "total_precincts": 190,
      "voting_patterns": {
        "democratic_precincts": 177,
        "republican_precincts": 2,
        "avg_dem_share": 89.78997049568382,
        "patterns": [
          "Geographic clustering of political preferences",
          "Urban-rural divide in voting patterns",
          "Relationship between precinct size and partisan lean"
        ]
      },
      "key_observations": [
        "Varying precinct sizes indicating population density differences",
        "Geographic distribution of political preferences",
        "Urban-rural voting pattern distinctions",
        "Relationship between precinct size and voter turnout"
      ]
    },
    "demographics": {
      "tract_count": 9129,
      "land_use_patterns": [
        "Variation in population density",
        "Urban-rural gradient",
        "Geographic distribution of communities",
        "Infrastructure and development patterns"
      ],
      "implications": [
        "Population distribution effects on representation",
        "Geographic factors influencing voter access",
        "Community clustering patterns",
        "Potential impact on electoral outcomes"
      ]
    }
  }
}


================================================================================
File: data/analysis/spatial/spatial_analysis_report.md
================================================================================

# CA-13 Spatial Analysis Report
Date: 2024-10-31

## State Districts

### Total Districts
52

### Ca13 Location
Central California

### Neighboring Districts
- CD 05
- CD 09
- CD 14
- CD 18
- CD 20
- CD 21
- CD 22

### Key Features
- Shows CA-13's position within California's congressional district system
- Highlights relative size and location of CA-13
- Demonstrates relationship with neighboring districts

## District 13

### District Characteristics
- Covers portions of Central Valley
- Includes both urban and rural areas
- Significant agricultural presence
- Major transportation corridors

### Geographic Features
- Varied terrain
- Important waterways
- Agricultural lands
- Urban centers

## Precincts

### Total Precincts
190

### Voting Patterns
{'democratic_precincts': 177, 'republican_precincts': 2, 'avg_dem_share': np.float64(89.78997049568382), 'patterns': ['Geographic clustering of political preferences', 'Urban-rural divide in voting patterns', 'Relationship between precinct size and partisan lean']}

### Key Observations
- Varying precinct sizes indicating population density differences
- Geographic distribution of political preferences
- Urban-rural voting pattern distinctions
- Relationship between precinct size and voter turnout

## Demographics

### Tract Count
9129

### Land Use Patterns
- Variation in population density
- Urban-rural gradient
- Geographic distribution of communities
- Infrastructure and development patterns

### Implications
- Population distribution effects on representation
- Geographic factors influencing voter access
- Community clustering patterns
- Potential impact on electoral outcomes




================================================================================
File: data/campaign_finance/ca13_candidates_raw.json
================================================================================

{
  "api_version": "1.0",
  "pagination": {
    "count": 7,
    "is_count_exact": true,
    "page": 1,
    "pages": 1,
    "per_page": 100
  },
  "results": [
    {
      "active_through": 2024,
      "candidate_id": "H0CA22102",
      "candidate_inactive": false,
      "candidate_status": "C",
      "cycles": [
        2020,
        2022,
        2024
      ],
      "district": "13",
      "district_number": 13,
      "election_districts": [
        "22",
        "13",
        "13"
      ],
      "election_years": [
        2020,
        2022,
        2024
      ],
      "federal_funds_flag": false,
      "first_file_date": "2019-06-05",
      "has_raised_funds": true,
      "inactive_election_years": null,
      "incumbent_challenge": "C",
      "incumbent_challenge_full": "Challenger",
      "last_f2_date": "2023-02-05",
      "last_file_date": "2023-02-05",
      "load_date": "2023-04-17T21:09:57",
      "name": "ARBALLO, PHIL",
      "office": "H",
      "office_full": "House",
      "party": "DEM",
      "party_full": "DEMOCRATIC PARTY",
      "principal_committees": [
        {
          "affiliated_committee_name": "NONE",
          "candidate_ids": [
            "H0CA22102"
          ],
          "committee_id": "C00830505",
          "committee_type": "H",
          "committee_type_full": "House",
          "cycles": [
            2022,
            2024
          ],
          "designation": "P",
          "designation_full": "Principal campaign committee",
          "filing_frequency": "Q",
          "first_f1_date": "2022-12-27",
          "first_file_date": "2022-12-27",
          "last_f1_date": "2022-12-27",
          "last_file_date": "2024-09-27",
          "name": "PHIL ARBALLO FOR CONGRESS",
          "organization_type": null,
          "organization_type_full": null,
          "party": "DEM",
          "party_full": "DEMOCRATIC PARTY",
          "state": "CA",
          "treasurer_name": "FAUSONE, PAUL"
        },
        {
          "affiliated_committee_name": "NONE",
          "candidate_ids": [
            "H0CA22102"
          ],
          "committee_id": "C00708479",
          "committee_type": "H",
          "committee_type_full": "House",
          "cycles": [
            2020,
            2022,
            2024
          ],
          "designation": "A",
          "designation_full": "Authorized by a candidate",
          "filing_frequency": "T",
          "first_f1_date": "2019-06-05",
          "first_file_date": "2019-06-05",
          "last_f1_date": "2022-01-20",
          "last_file_date": "2023-01-12",
          "name": "ARBALLO FOR CONGRESS",
          "organization_type": null,
          "organization_type_full": null,
          "party": "DEM",
          "party_full": "DEMOCRATIC PARTY",
          "state": "CA",
          "treasurer_name": "JACKSON, SUE"
        }
      ],
      "state": "CA"
    },
    {
      "active_through": 2024,
      "candidate_id": "H4CA13095",
      "candidate_inactive": false,
      "candidate_status": "C",
      "cycles": [
        2022,
        2024
      ],
      "district": "13",
      "district_number": 13,
      "election_districts": [
        "13"
      ],
      "election_years": [
        2024
      ],
      "federal_funds_flag": false,
      "first_file_date": "2022-12-08",
      "has_raised_funds": true,
      "inactive_election_years": null,
      "incumbent_challenge": "C",
      "incumbent_challenge_full": "Challenger",
      "last_f2_date": "2022-12-08",
      "last_file_date": "2022-12-08",
      "load_date": "2023-02-22T21:10:33",
      "name": "BOYD, BRAD",
      "office": "H",
      "office_full": "House",
      "party": "DEM",
      "party_full": "DEMOCRATIC PARTY",
      "principal_committees": [
        {
          "affiliated_committee_name": "NONE",
          "candidate_ids": [
            "H4CA13095"
          ],
          "committee_id": "C00829770",
          "committee_type": "H",
          "committee_type_full": "House",
          "cycles": [
            2022,
            2024
          ],
          "designation": "P",
          "designation_full": "Principal campaign committee",
          "filing_frequency": "T",
          "first_f1_date": "2022-12-08",
          "first_file_date": "2022-12-08",
          "last_f1_date": "2022-12-08",
          "last_file_date": "2023-03-20",
          "name": "FRIENDS OF BRAD BOYD",
          "organization_type": null,
          "organization_type_full": null,
          "party": "DEM",
          "party_full": "DEMOCRATIC PARTY",
          "state": "CA",
          "treasurer_name": "LO, ANDY"
        }
      ],
      "state": "CA"
    },
    {
      "active_through": 2024,
      "candidate_id": "H2CA13131",
      "candidate_inactive": false,
      "candidate_status": "C",
      "cycles": [
        2022,
        2024
      ],
      "district": "13",
      "district_number": 13,
      "election_districts": [
        "13",
        "13"
      ],
      "election_years": [
        2022,
        2024
      ],
      "federal_funds_flag": false,
      "first_file_date": "2022-03-09",
      "has_raised_funds": true,
      "inactive_election_years": null,
      "incumbent_challenge": "I",
      "incumbent_challenge_full": "Incumbent",
      "last_f2_date": "2024-07-14",
      "last_file_date": "2024-07-14",
      "load_date": "2024-07-14T20:59:32",
      "name": "DUARTE, JOHN",
      "office": "H",
      "office_full": "House",
      "party": "REP",
      "party_full": "REPUBLICAN PARTY",
      "principal_committees": [
        {
          "affiliated_committee_name": "DUARTE VICTORY FUND",
          "candidate_ids": [
            "H2CA13131"
          ],
          "committee_id": "C00808279",
          "committee_type": "H",
          "committee_type_full": "House",
          "cycles": [
            2022,
            2024
          ],
          "designation": "P",
          "designation_full": "Principal campaign committee",
          "filing_frequency": "Q",
          "first_f1_date": "2022-03-09",
          "first_file_date": "2022-03-09",
          "last_f1_date": "2024-07-14",
          "last_file_date": "2024-10-29",
          "name": "JOHN DUARTE FOR CONGRESS",
          "organization_type": null,
          "organization_type_full": null,
          "party": "REP",
          "party_full": "REPUBLICAN PARTY",
          "state": "CA",
          "treasurer_name": "LAWLER, KELLY"
        }
      ],
      "state": "CA"
    },
    {
      "active_through": 2024,
      "candidate_id": "H2CA13115",
      "candidate_inactive": false,
      "candidate_status": "C",
      "cycles": [
        2022,
        2024
      ],
      "district": "13",
      "district_number": 13,
      "election_districts": [
        "13",
        "13"
      ],
      "election_years": [
        2022,
        2024
      ],
      "federal_funds_flag": false,
      "first_file_date": "2022-01-18",
      "has_raised_funds": true,
      "inactive_election_years": null,
      "incumbent_challenge": "C",
      "incumbent_challenge_full": "Challenger",
      "last_f2_date": "2023-02-10",
      "last_file_date": "2023-02-10",
      "load_date": "2023-08-06T21:01:25",
      "name": "GRAY, ADAM C.",
      "office": "H",
      "office_full": "House",
      "party": "DEM",
      "party_full": "DEMOCRATIC PARTY",
      "principal_committees": [
        {
          "affiliated_committee_name": "BLUE TO THE FUTURE 2024",
          "candidate_ids": [
            "H2CA13115"
          ],
          "committee_id": "C00801431",
          "committee_type": "H",
          "committee_type_full": "House",
          "cycles": [
            2022,
            2024
          ],
          "designation": "P",
          "designation_full": "Principal campaign committee",
          "filing_frequency": "Q",
          "first_f1_date": "2022-01-18",
          "first_file_date": "2022-01-18",
          "last_f1_date": "2024-09-12",
          "last_file_date": "2024-10-29",
          "name": "ADAM GRAY FOR CONGRESS",
          "organization_type": null,
          "organization_type_full": null,
          "party": "DEM",
          "party_full": "DEMOCRATIC PARTY",
          "state": "CA",
          "treasurer_name": "OLSON, MEAGAN"
        }
      ],
      "state": "CA"
    },
    {
      "active_through": 2024,
      "candidate_id": "H2CA13123",
      "candidate_inactive": false,
      "candidate_status": "N",
      "cycles": [
        2022,
        2024
      ],
      "district": "13",
      "district_number": 13,
      "election_districts": [
        "13",
        "13"
      ],
      "election_years": [
        2022,
        2024
      ],
      "federal_funds_flag": false,
      "first_file_date": "2022-02-01",
      "has_raised_funds": true,
      "inactive_election_years": null,
      "incumbent_challenge": "C",
      "incumbent_challenge_full": "Challenger",
      "last_f2_date": "2023-04-12",
      "last_file_date": "2023-04-12",
      "load_date": "2023-04-16T21:09:31",
      "name": "MARTINEZ, DIEGO J",
      "office": "H",
      "office_full": "House",
      "party": "REP",
      "party_full": "REPUBLICAN PARTY",
      "principal_committees": [
        {
          "affiliated_committee_name": "NONE",
          "candidate_ids": [
            "H2CA13123"
          ],
          "committee_id": "C00803452",
          "committee_type": "H",
          "committee_type_full": "House",
          "cycles": [
            2022,
            2024
          ],
          "designation": "P",
          "designation_full": "Principal campaign committee",
          "filing_frequency": "Q",
          "first_f1_date": "2022-02-01",
          "first_file_date": "2022-02-01",
          "last_f1_date": "2022-08-24",
          "last_file_date": "2024-10-18",
          "name": "MARTINEZ FOR CONGRESS",
          "organization_type": null,
          "organization_type_full": null,
          "party": "REP",
          "party_full": "REPUBLICAN PARTY",
          "state": "CA",
          "treasurer_name": "MONTGOMERY, THOMAS"
        }
      ],
      "state": "CA"
    },
    {
      "active_through": 2024,
      "candidate_id": "H2CA13107",
      "candidate_inactive": false,
      "candidate_status": "N",
      "cycles": [
        2022,
        2024
      ],
      "district": "13",
      "district_number": 13,
      "election_districts": [
        "13",
        "13"
      ],
      "election_years": [
        2022,
        2024
      ],
      "federal_funds_flag": false,
      "first_file_date": "2021-12-24",
      "has_raised_funds": false,
      "inactive_election_years": null,
      "incumbent_challenge": "C",
      "incumbent_challenge_full": "Challenger",
      "last_f2_date": "2022-08-22",
      "last_file_date": "2022-08-22",
      "load_date": "2023-01-12T22:24:01",
      "name": "ROSARIO-SIGALA, ANGELINA",
      "office": "H",
      "office_full": "House",
      "party": "DEM",
      "party_full": "DEMOCRATIC PARTY",
      "principal_committees": [
        {
          "affiliated_committee_name": "NONE",
          "candidate_ids": [
            "H2CA13107",
            "H4CA13103"
          ],
          "committee_id": "C00798348",
          "committee_type": "H",
          "committee_type_full": "House",
          "cycles": [
            2022,
            2024
          ],
          "designation": "P",
          "designation_full": "Principal campaign committee",
          "filing_frequency": "Q",
          "first_f1_date": "2021-12-24",
          "first_file_date": "2021-12-24",
          "last_f1_date": "2023-01-16",
          "last_file_date": "2023-01-16",
          "name": "ANGELINA SIGALA-ROSARIO FOR CONGRESS",
          "organization_type": null,
          "organization_type_full": null,
          "party": "DEM",
          "party_full": "DEMOCRATIC PARTY",
          "state": "CA",
          "treasurer_name": "ANDRADE, SUSANA"
        }
      ],
      "state": "CA"
    },
    {
      "active_through": 2024,
      "candidate_id": "H4CA13103",
      "candidate_inactive": false,
      "candidate_status": "N",
      "cycles": [
        2024
      ],
      "district": "13",
      "district_number": 13,
      "election_districts": [
        "13"
      ],
      "election_years": [
        2024
      ],
      "federal_funds_flag": false,
      "first_file_date": "2023-01-16",
      "has_raised_funds": false,
      "inactive_election_years": null,
      "incumbent_challenge": "C",
      "incumbent_challenge_full": "Challenger",
      "last_f2_date": "2023-01-16",
      "last_file_date": "2023-01-16",
      "load_date": "2023-01-17T22:56:56",
      "name": "SIGALA-ROSARIO, ANGELINA",
      "office": "H",
      "office_full": "House",
      "party": "DEM",
      "party_full": "DEMOCRATIC PARTY",
      "principal_committees": [
        {
          "affiliated_committee_name": "NONE",
          "candidate_ids": [
            "H2CA13107",
            "H4CA13103"
          ],
          "committee_id": "C00798348",
          "committee_type": "H",
          "committee_type_full": "House",
          "cycles": [
            2022,
            2024
          ],
          "designation": "P",
          "designation_full": "Principal campaign committee",
          "filing_frequency": "Q",
          "first_f1_date": "2021-12-24",
          "first_file_date": "2021-12-24",
          "last_f1_date": "2023-01-16",
          "last_file_date": "2023-01-16",
          "name": "ANGELINA SIGALA-ROSARIO FOR CONGRESS",
          "organization_type": null,
          "organization_type_full": null,
          "party": "DEM",
          "party_full": "DEMOCRATIC PARTY",
          "state": "CA",
          "treasurer_name": "ANDRADE, SUSANA"
        }
      ],
      "state": "CA"
    }
  ]
}


================================================================================
File: data/campaign_finance/ca13_comprehensive_data.json
================================================================================

{
  "district": "CA-13",
  "fetch_date": "2024-10-30T16:41:54.935336",
  "candidates": {
    "ARBALLO, PHIL": {
      "candidate_info": {
        "active_through": 2024,
        "candidate_id": "H0CA22102",
        "candidate_inactive": false,
        "candidate_status": "C",
        "cycles": [
          2020,
          2022,
          2024
        ],
        "district": "13",
        "district_number": 13,
        "election_districts": [
          "22",
          "13",
          "13"
        ],
        "election_years": [
          2020,
          2022,
          2024
        ],
        "federal_funds_flag": false,
        "first_file_date": "2019-06-05",
        "has_raised_funds": true,
        "inactive_election_years": null,
        "incumbent_challenge": "C",
        "incumbent_challenge_full": "Challenger",
        "last_f2_date": "2023-02-05",
        "last_file_date": "2023-02-05",
        "load_date": "2023-04-17T21:09:57",
        "name": "ARBALLO, PHIL",
        "office": "H",
        "office_full": "House",
        "party": "DEM",
        "party_full": "DEMOCRATIC PARTY",
        "principal_committees": [
          {
            "affiliated_committee_name": "NONE",
            "candidate_ids": [
              "H0CA22102"
            ],
            "committee_id": "C00830505",
            "committee_type": "H",
            "committee_type_full": "House",
            "cycles": [
              2022,
              2024
            ],
            "designation": "P",
            "designation_full": "Principal campaign committee",
            "filing_frequency": "Q",
            "first_f1_date": "2022-12-27",
            "first_file_date": "2022-12-27",
            "last_f1_date": "2022-12-27",
            "last_file_date": "2024-09-27",
            "name": "PHIL ARBALLO FOR CONGRESS",
            "organization_type": null,
            "organization_type_full": null,
            "party": "DEM",
            "party_full": "DEMOCRATIC PARTY",
            "state": "CA",
            "treasurer_name": "FAUSONE, PAUL"
          },
          {
            "affiliated_committee_name": "NONE",
            "candidate_ids": [
              "H0CA22102"
            ],
            "committee_id": "C00708479",
            "committee_type": "H",
            "committee_type_full": "House",
            "cycles": [
              2020,
              2022,
              2024
            ],
            "designation": "A",
            "designation_full": "Authorized by a candidate",
            "filing_frequency": "T",
            "first_f1_date": "2019-06-05",
            "first_file_date": "2019-06-05",
            "last_f1_date": "2022-01-20",
            "last_file_date": "2023-01-12",
            "name": "ARBALLO FOR CONGRESS",
            "organization_type": null,
            "organization_type_full": null,
            "party": "DEM",
            "party_full": "DEMOCRATIC PARTY",
            "state": "CA",
            "treasurer_name": "JACKSON, SUE"
          }
        ],
        "state": "CA"
      },
      "financial_data": [
        {
          "all_other_loans": 0.0,
          "candidate_contribution": 0.0,
          "candidate_election_year": 2024,
          "candidate_id": "H0CA22102",
          "contribution_refunds": 1050.0,
          "contributions": 116818.03,
          "coverage_end_date": "2024-09-30T00:00:00",
          "coverage_start_date": "2023-01-01T00:00:00",
          "cycle": null,
          "disbursements": 99934.56,
          "election_full": true,
          "exempt_legal_accounting_disbursement": 0.0,
          "federal_funds": 0.0,
          "fundraising_disbursements": 0.0,
          "individual_contributions": 116818.03,
          "individual_itemized_contributions": 77585.0,
          "individual_unitemized_contributions": 39233.03,
          "last_beginning_image_number": "202409279684753305",
          "last_cash_on_hand_end_period": 16833.47,
          "last_debts_owed_by_committee": 0.0,
          "last_debts_owed_to_committee": 0.0,
          "last_net_contributions": 0.0,
          "last_net_operating_expenditures": 0.0,
          "last_report_type_full": "OCTOBER QUARTERLY",
          "last_report_year": 2024,
          "loan_repayments": 0.0,
          "loan_repayments_candidate_loans": 0.0,
          "loan_repayments_other_loans": 0.0,
          "loans": 0.0,
          "loans_made_by_candidate": 0.0,
          "net_contributions": 115768.03,
          "net_operating_expenditures": 98884.56,
          "offsets_to_fundraising_expenditures": 0.0,
          "offsets_to_legal_accounting": 0.0,
          "offsets_to_operating_expenditures": 0.0,
          "operating_expenditures": 98884.56,
          "other_disbursements": 0.0,
          "other_political_committee_contributions": 0.0,
          "other_receipts": 0.0,
          "political_party_committee_contributions": 0.0,
          "receipts": 116818.03,
          "refunded_individual_contributions": 1050.0,
          "refunded_other_political_committee_contributions": 0.0,
          "refunded_political_party_committee_contributions": 0.0,
          "total_offsets_to_operating_expenditures": 0.0,
          "transaction_coverage_date": "2024-09-30T00:00:00",
          "transfers_from_other_authorized_committee": 0.0,
          "transfers_to_other_authorized_committee": 0.0
        },
        {
          "all_other_loans": 0.0,
          "candidate_contribution": 0.0,
          "candidate_election_year": 2022,
          "candidate_id": "H0CA22102",
          "contribution_refunds": 138234.46,
          "contributions": 1588306.08,
          "coverage_end_date": "2022-12-19T00:00:00",
          "coverage_start_date": "2021-01-01T00:00:00",
          "cycle": null,
          "disbursements": 1637184.73,
          "election_full": true,
          "exempt_legal_accounting_disbursement": 0.0,
          "federal_funds": 0.0,
          "fundraising_disbursements": 0.0,
          "individual_contributions": 1539306.08,
          "individual_itemized_contributions": 842424.07,
          "individual_unitemized_contributions": 696882.01,
          "last_beginning_image_number": "202212209574187268",
          "last_cash_on_hand_end_period": 0.0,
          "last_debts_owed_by_committee": 0.0,
          "last_debts_owed_to_committee": 0.0,
          "last_net_contributions": 0.0,
          "last_net_operating_expenditures": 160.38,
          "last_report_type_full": "TERMINATION REPORT",
          "last_report_year": 2022,
          "loan_repayments": 0.0,
          "loan_repayments_candidate_loans": 0.0,
          "loan_repayments_other_loans": 0.0,
          "loans": 0.0,
          "loans_made_by_candidate": 0.0,
          "net_contributions": 1450071.62,
          "net_operating_expenditures": 1478403.78,
          "offsets_to_fundraising_expenditures": 0.0,
          "offsets_to_legal_accounting": 0.0,
          "offsets_to_operating_expenditures": 18096.49,
          "operating_expenditures": 1496500.27,
          "other_disbursements": 2450.0,
          "other_political_committee_contributions": 49000.0,
          "other_receipts": 1516.15,
          "political_party_committee_contributions": 0.0,
          "receipts": 1607918.72,
          "refunded_individual_contributions": 125959.46,
          "refunded_other_political_committee_contributions": 12275.0,
          "refunded_political_party_committee_contributions": 0.0,
          "total_offsets_to_operating_expenditures": 0.0,
          "transaction_coverage_date": "2022-12-19T00:00:00",
          "transfers_from_other_authorized_committee": 0.0,
          "transfers_to_other_authorized_committee": 0.0
        },
        {
          "all_other_loans": 0.0,
          "candidate_contribution": 0.0,
          "candidate_election_year": 2020,
          "candidate_id": "H0CA22102",
          "contribution_refunds": 82037.17,
          "contributions": 5171600.07,
          "coverage_end_date": "2020-12-31T00:00:00",
          "coverage_start_date": "2019-04-01T00:00:00",
          "cycle": null,
          "disbursements": 5146107.01,
          "election_full": true,
          "exempt_legal_accounting_disbursement": 0.0,
          "federal_funds": 0.0,
          "fundraising_disbursements": 0.0,
          "individual_contributions": 5100278.0,
          "individual_itemized_contributions": 2265863.42,
          "individual_unitemized_contributions": 2834414.58,
          "last_beginning_image_number": "202101299417680118",
          "last_cash_on_hand_end_period": 29266.01,
          "last_debts_owed_by_committee": 0.0,
          "last_debts_owed_to_committee": 0.0,
          "last_net_contributions": 200.0,
          "last_net_operating_expenditures": 2634.55,
          "last_report_type_full": "YEAR-END",
          "last_report_year": 2020,
          "loan_repayments": 0.0,
          "loan_repayments_candidate_loans": 0.0,
          "loan_repayments_other_loans": 0.0,
          "loans": 0.0,
          "loans_made_by_candidate": 0.0,
          "net_contributions": 5089562.9,
          "net_operating_expenditures": 5061205.32,
          "offsets_to_fundraising_expenditures": 0.0,
          "offsets_to_legal_accounting": 0.0,
          "offsets_to_operating_expenditures": 1884.52,
          "operating_expenditures": 5063089.84,
          "other_disbursements": 980.0,
          "other_political_committee_contributions": 71072.07,
          "other_receipts": 460.71,
          "political_party_committee_contributions": 250.0,
          "receipts": 5175373.02,
          "refunded_individual_contributions": 82022.17,
          "refunded_other_political_committee_contributions": 15.0,
          "refunded_political_party_committee_contributions": 0.0,
          "total_offsets_to_operating_expenditures": 0.0,
          "transaction_coverage_date": "2020-12-31T00:00:00",
          "transfers_from_other_authorized_committee": 1427.72,
          "transfers_to_other_authorized_committee": 0.0
        },
        {
          "all_other_loans": 0.0,
          "candidate_contribution": 0.0,
          "candidate_election_year": 2024,
          "candidate_id": "H0CA22102",
          "contribution_refunds": 1050.0,
          "contributions": 116818.03,
          "coverage_end_date": "2024-09-30T00:00:00",
          "coverage_start_date": "2023-01-01T00:00:00",
          "cycle": 2024,
          "disbursements": 99934.56,
          "election_full": false,
          "exempt_legal_accounting_disbursement": 0.0,
          "federal_funds": 0.0,
          "fundraising_disbursements": 0.0,
          "individual_contributions": 116818.03,
          "individual_itemized_contributions": 77585.0,
          "individual_unitemized_contributions": 39233.03,
          "last_beginning_image_number": "202409279684753305",
          "last_cash_on_hand_end_period": 16833.47,
          "last_debts_owed_by_committee": 0.0,
          "last_debts_owed_to_committee": 0.0,
          "last_net_contributions": 0.0,
          "last_net_operating_expenditures": 0.0,
          "last_report_type_full": "OCTOBER QUARTERLY",
          "last_report_year": 2024,
          "loan_repayments": 0.0,
          "loan_repayments_candidate_loans": 0.0,
          "loan_repayments_other_loans": 0.0,
          "loans": 0.0,
          "loans_made_by_candidate": 0.0,
          "net_contributions": 115768.03,
          "net_operating_expenditures": 98884.56,
          "offsets_to_fundraising_expenditures": 0.0,
          "offsets_to_legal_accounting": 0.0,
          "offsets_to_operating_expenditures": 0.0,
          "operating_expenditures": 98884.56,
          "other_disbursements": 0.0,
          "other_political_committee_contributions": 0.0,
          "other_receipts": 0.0,
          "political_party_committee_contributions": 0.0,
          "receipts": 116818.03,
          "refunded_individual_contributions": 1050.0,
          "refunded_other_political_committee_contributions": 0.0,
          "refunded_political_party_committee_contributions": 0.0,
          "total_offsets_to_operating_expenditures": 0.0,
          "transaction_coverage_date": "2024-09-30T00:00:00",
          "transfers_from_other_authorized_committee": 0.0,
          "transfers_to_other_authorized_committee": 0.0
        },
        {
          "all_other_loans": 0.0,
          "candidate_contribution": 0.0,
          "candidate_election_year": 2022,
          "candidate_id": "H0CA22102",
          "contribution_refunds": 138234.46,
          "contributions": 1588306.08,
          "coverage_end_date": "2022-12-19T00:00:00",
          "coverage_start_date": "2021-01-01T00:00:00",
          "cycle": 2022,
          "disbursements": 1637184.73,
          "election_full": false,
          "exempt_legal_accounting_disbursement": 0.0,
          "federal_funds": 0.0,
          "fundraising_disbursements": 0.0,
          "individual_contributions": 1539306.08,
          "individual_itemized_contributions": 842424.07,
          "individual_unitemized_contributions": 696882.01,
          "last_beginning_image_number": "202212209574187268",
          "last_cash_on_hand_end_period": 0.0,
          "last_debts_owed_by_committee": 0.0,
          "last_debts_owed_to_committee": 0.0,
          "last_net_contributions": 0.0,
          "last_net_operating_expenditures": 160.38,
          "last_report_type_full": "TERMINATION REPORT",
          "last_report_year": 2022,
          "loan_repayments": 0.0,
          "loan_repayments_candidate_loans": 0.0,
          "loan_repayments_other_loans": 0.0,
          "loans": 0.0,
          "loans_made_by_candidate": 0.0,
          "net_contributions": 1450071.62,
          "net_operating_expenditures": 1478403.78,
          "offsets_to_fundraising_expenditures": 0.0,
          "offsets_to_legal_accounting": 0.0,
          "offsets_to_operating_expenditures": 18096.49,
          "operating_expenditures": 1496500.27,
          "other_disbursements": 2450.0,
          "other_political_committee_contributions": 49000.0,
          "other_receipts": 1516.15,
          "political_party_committee_contributions": 0.0,
          "receipts": 1607918.72,
          "refunded_individual_contributions": 125959.46,
          "refunded_other_political_committee_contributions": 12275.0,
          "refunded_political_party_committee_contributions": 0.0,
          "total_offsets_to_operating_expenditures": 0.0,
          "transaction_coverage_date": "2022-12-19T00:00:00",
          "transfers_from_other_authorized_committee": 0.0,
          "transfers_to_other_authorized_committee": 0.0
        },
        {
          "all_other_loans": 0.0,
          "candidate_contribution": 0.0,
          "candidate_election_year": 2020,
          "candidate_id": "H0CA22102",
          "contribution_refunds": 82037.17,
          "contributions": 5171600.07,
          "coverage_end_date": "2020-12-31T00:00:00",
          "coverage_start_date": "2019-04-01T00:00:00",
          "cycle": 2020,
          "disbursements": 5146107.01,
          "election_full": false,
          "exempt_legal_accounting_disbursement": 0.0,
          "federal_funds": 0.0,
          "fundraising_disbursements": 0.0,
          "individual_contributions": 5100278.0,
          "individual_itemized_contributions": 2265863.42,
          "individual_unitemized_contributions": 2834414.58,
          "last_beginning_image_number": "202101299417680118",
          "last_cash_on_hand_end_period": 29266.01,
          "last_debts_owed_by_committee": 0.0,
          "last_debts_owed_to_committee": 0.0,
          "last_net_contributions": 200.0,
          "last_net_operating_expenditures": 2634.55,
          "last_report_type_full": "YEAR-END",
          "last_report_year": 2020,
          "loan_repayments": 0.0,
          "loan_repayments_candidate_loans": 0.0,
          "loan_repayments_other_loans": 0.0,
          "loans": 0.0,
          "loans_made_by_candidate": 0.0,
          "net_contributions": 5089562.9,
          "net_operating_expenditures": 5061205.32,
          "offsets_to_fundraising_expenditures": 0.0,
          "offsets_to_legal_accounting": 0.0,
          "offsets_to_operating_expenditures": 1884.52,
          "operating_expenditures": 5063089.84,
          "other_disbursements": 980.0,
          "other_political_committee_contributions": 71072.07,
          "other_receipts": 460.71,
          "political_party_committee_contributions": 250.0,
          "receipts": 5175373.02,
          "refunded_individual_contributions": 82022.17,
          "refunded_other_political_committee_contributions": 15.0,
          "refunded_political_party_committee_contributions": 0.0,
          "total_offsets_to_operating_expenditures": 0.0,
          "transaction_coverage_date": "2020-12-31T00:00:00",
          "transfers_from_other_authorized_committee": 1427.72,
          "transfers_to_other_authorized_committee": 0.0
        }
      ]
    },
    "BOYD, BRAD": {
      "candidate_info": {
        "active_through": 2024,
        "candidate_id": "H4CA13095",
        "candidate_inactive": false,
        "candidate_status": "C",
        "cycles": [
          2022,
          2024
        ],
        "district": "13",
        "district_number": 13,
        "election_districts": [
          "13"
        ],
        "election_years": [
          2024
        ],
        "federal_funds_flag": false,
        "first_file_date": "2022-12-08",
        "has_raised_funds": true,
        "inactive_election_years": null,
        "incumbent_challenge": "C",
        "incumbent_challenge_full": "Challenger",
        "last_f2_date": "2022-12-08",
        "last_file_date": "2022-12-08",
        "load_date": "2023-02-22T21:10:33",
        "name": "BOYD, BRAD",
        "office": "H",
        "office_full": "House",
        "party": "DEM",
        "party_full": "DEMOCRATIC PARTY",
        "principal_committees": [
          {
            "affiliated_committee_name": "NONE",
            "candidate_ids": [
              "H4CA13095"
            ],
            "committee_id": "C00829770",
            "committee_type": "H",
            "committee_type_full": "House",
            "cycles": [
              2022,
              2024
            ],
            "designation": "P",
            "designation_full": "Principal campaign committee",
            "filing_frequency": "T",
            "first_f1_date": "2022-12-08",
            "first_file_date": "2022-12-08",
            "last_f1_date": "2022-12-08",
            "last_file_date": "2023-03-20",
            "name": "FRIENDS OF BRAD BOYD",
            "organization_type": null,
            "organization_type_full": null,
            "party": "DEM",
            "party_full": "DEMOCRATIC PARTY",
            "state": "CA",
            "treasurer_name": "LO, ANDY"
          }
        ],
        "state": "CA"
      },
      "financial_data": [
        {
          "all_other_loans": 0.0,
          "candidate_contribution": 0.0,
          "candidate_election_year": 2024,
          "candidate_id": "H4CA13095",
          "contribution_refunds": 0.0,
          "contributions": 7700.0,
          "coverage_end_date": "2023-03-31T00:00:00",
          "coverage_start_date": "2023-01-01T00:00:00",
          "cycle": null,
          "disbursements": 8468.4,
          "election_full": true,
          "exempt_legal_accounting_disbursement": 0.0,
          "federal_funds": 0.0,
          "fundraising_disbursements": 0.0,
          "individual_contributions": 7700.0,
          "individual_itemized_contributions": 7450.0,
          "individual_unitemized_contributions": 250.0,
          "last_beginning_image_number": "202302209578711209",
          "last_cash_on_hand_end_period": 0.0,
          "last_debts_owed_by_committee": 0.0,
          "last_debts_owed_to_committee": 0.0,
          "last_net_contributions": 7700.0,
          "last_net_operating_expenditures": 8090.05,
          "last_report_type_full": "TERMINATION REPORT",
          "last_report_year": 2023,
          "loan_repayments": 0.0,
          "loan_repayments_candidate_loans": 0.0,
          "loan_repayments_other_loans": 0.0,
          "loans": 0.0,
          "loans_made_by_candidate": 0.0,
          "net_contributions": 7700.0,
          "net_operating_expenditures": 8090.05,
          "offsets_to_fundraising_expenditures": 0.0,
          "offsets_to_legal_accounting": 0.0,
          "offsets_to_operating_expenditures": 0.0,
          "operating_expenditures": 8090.05,
          "other_disbursements": 378.35,
          "other_political_committee_contributions": 0.0,
          "other_receipts": 0.0,
          "political_party_committee_contributions": 0.0,
          "receipts": 7700.0,
          "refunded_individual_contributions": 0.0,
          "refunded_other_political_committee_contributions": 0.0,
          "refunded_political_party_committee_contributions": 0.0,
          "total_offsets_to_operating_expenditures": 0.0,
          "transaction_coverage_date": "2023-03-31T00:00:00",
          "transfers_from_other_authorized_committee": 0.0,
          "transfers_to_other_authorized_committee": 0.0
        },
        {
          "all_other_loans": 0.0,
          "candidate_contribution": 0.0,
          "candidate_election_year": 2024,
          "candidate_id": "H4CA13095",
          "contribution_refunds": 0.0,
          "contributions": 7700.0,
          "coverage_end_date": "2023-03-31T00:00:00",
          "coverage_start_date": "2023-01-01T00:00:00",
          "cycle": 2024,
          "disbursements": 8468.4,
          "election_full": false,
          "exempt_legal_accounting_disbursement": 0.0,
          "federal_funds": 0.0,
          "fundraising_disbursements": 0.0,
          "individual_contributions": 7700.0,
          "individual_itemized_contributions": 7450.0,
          "individual_unitemized_contributions": 250.0,
          "last_beginning_image_number": "202302209578711209",
          "last_cash_on_hand_end_period": 0.0,
          "last_debts_owed_by_committee": 0.0,
          "last_debts_owed_to_committee": 0.0,
          "last_net_contributions": 7700.0,
          "last_net_operating_expenditures": 8090.05,
          "last_report_type_full": "TERMINATION REPORT",
          "last_report_year": 2023,
          "loan_repayments": 0.0,
          "loan_repayments_candidate_loans": 0.0,
          "loan_repayments_other_loans": 0.0,
          "loans": 0.0,
          "loans_made_by_candidate": 0.0,
          "net_contributions": 7700.0,
          "net_operating_expenditures": 8090.05,
          "offsets_to_fundraising_expenditures": 0.0,
          "offsets_to_legal_accounting": 0.0,
          "offsets_to_operating_expenditures": 0.0,
          "operating_expenditures": 8090.05,
          "other_disbursements": 378.35,
          "other_political_committee_contributions": 0.0,
          "other_receipts": 0.0,
          "political_party_committee_contributions": 0.0,
          "receipts": 7700.0,
          "refunded_individual_contributions": 0.0,
          "refunded_other_political_committee_contributions": 0.0,
          "refunded_political_party_committee_contributions": 0.0,
          "total_offsets_to_operating_expenditures": 0.0,
          "transaction_coverage_date": "2023-03-31T00:00:00",
          "transfers_from_other_authorized_committee": 0.0,
          "transfers_to_other_authorized_committee": 0.0
        },
        {
          "all_other_loans": 0.0,
          "candidate_contribution": 0.0,
          "candidate_election_year": null,
          "candidate_id": "H4CA13095",
          "contribution_refunds": 0.0,
          "contributions": 800.0,
          "coverage_end_date": "2022-12-31T00:00:00",
          "coverage_start_date": "2022-11-09T00:00:00",
          "cycle": 2022,
          "disbursements": 31.6,
          "election_full": false,
          "exempt_legal_accounting_disbursement": 0.0,
          "federal_funds": 0.0,
          "fundraising_disbursements": 0.0,
          "individual_contributions": 800.0,
          "individual_itemized_contributions": 500.0,
          "individual_unitemized_contributions": 300.0,
          "last_beginning_image_number": "202302209578709110",
          "last_cash_on_hand_end_period": 768.4,
          "last_debts_owed_by_committee": 0.0,
          "last_debts_owed_to_committee": 0.0,
          "last_net_contributions": 800.0,
          "last_net_operating_expenditures": 31.6,
          "last_report_type_full": "YEAR-END",
          "last_report_year": 2022,
          "loan_repayments": 0.0,
          "loan_repayments_candidate_loans": 0.0,
          "loan_repayments_other_loans": 0.0,
          "loans": 0.0,
          "loans_made_by_candidate": 0.0,
          "net_contributions": 800.0,
          "net_operating_expenditures": 31.6,
          "offsets_to_fundraising_expenditures": 0.0,
          "offsets_to_legal_accounting": 0.0,
          "offsets_to_operating_expenditures": 0.0,
          "operating_expenditures": 31.6,
          "other_disbursements": 0.0,
          "other_political_committee_contributions": 0.0,
          "other_receipts": 0.0,
          "political_party_committee_contributions": 0.0,
          "receipts": 800.0,
          "refunded_individual_contributions": 0.0,
          "refunded_other_political_committee_contributions": 0.0,
          "refunded_political_party_committee_contributions": 0.0,
          "total_offsets_to_operating_expenditures": 0.0,
          "transaction_coverage_date": "2022-12-31T00:00:00",
          "transfers_from_other_authorized_committee": 0.0,
          "transfers_to_other_authorized_committee": 0.0
        }
      ]
    },
    "DUARTE, JOHN": {
      "candidate_info": {
        "active_through": 2024,
        "candidate_id": "H2CA13131",
        "candidate_inactive": false,
        "candidate_status": "C",
        "cycles": [
          2022,
          2024
        ],
        "district": "13",
        "district_number": 13,
        "election_districts": [
          "13",
          "13"
        ],
        "election_years": [
          2022,
          2024
        ],
        "federal_funds_flag": false,
        "first_file_date": "2022-03-09",
        "has_raised_funds": true,
        "inactive_election_years": null,
        "incumbent_challenge": "I",
        "incumbent_challenge_full": "Incumbent",
        "last_f2_date": "2024-07-14",
        "last_file_date": "2024-07-14",
        "load_date": "2024-07-14T20:59:32",
        "name": "DUARTE, JOHN",
        "office": "H",
        "office_full": "House",
        "party": "REP",
        "party_full": "REPUBLICAN PARTY",
        "principal_committees": [
          {
            "affiliated_committee_name": "DUARTE VICTORY FUND",
            "candidate_ids": [
              "H2CA13131"
            ],
            "committee_id": "C00808279",
            "committee_type": "H",
            "committee_type_full": "House",
            "cycles": [
              2022,
              2024
            ],
            "designation": "P",
            "designation_full": "Principal campaign committee",
            "filing_frequency": "Q",
            "first_f1_date": "2022-03-09",
            "first_file_date": "2022-03-09",
            "last_f1_date": "2024-07-14",
            "last_file_date": "2024-10-29",
            "name": "JOHN DUARTE FOR CONGRESS",
            "organization_type": null,
            "organization_type_full": null,
            "party": "REP",
            "party_full": "REPUBLICAN PARTY",
            "state": "CA",
            "treasurer_name": "LAWLER, KELLY"
          }
        ],
        "state": "CA"
      },
      "financial_data": [
        {
          "all_other_loans": 0.0,
          "candidate_contribution": 0.0,
          "candidate_election_year": 2024,
          "candidate_id": "H2CA13131",
          "contribution_refunds": 46179.28,
          "contributions": 2813725.72,
          "coverage_end_date": "2024-10-16T00:00:00",
          "coverage_start_date": "2023-01-01T00:00:00",
          "cycle": null,
          "disbursements": 3213218.23,
          "election_full": true,
          "exempt_legal_accounting_disbursement": 0.0,
          "federal_funds": 0.0,
          "fundraising_disbursements": 0.0,
          "individual_contributions": 1579691.68,
          "individual_itemized_contributions": 1503246.45,
          "individual_unitemized_contributions": 76445.23,
          "last_beginning_image_number": "202305049581410021",
          "last_cash_on_hand_end_period": 959391.99,
          "last_debts_owed_by_committee": 0.0,
          "last_debts_owed_to_committee": 0.0,
          "last_net_contributions": 139662.28,
          "last_net_operating_expenditures": 1001263.13,
          "last_report_type_full": "TERMINATION REPORT",
          "last_report_year": 2024,
          "loan_repayments": 0.0,
          "loan_repayments_candidate_loans": 0.0,
          "loan_repayments_other_loans": 0.0,
          "loans": 0.0,
          "loans_made_by_candidate": 0.0,
          "net_contributions": 2767546.44,
          "net_operating_expenditures": 3127821.2,
          "offsets_to_fundraising_expenditures": 0.0,
          "offsets_to_legal_accounting": 0.0,
          "offsets_to_operating_expenditures": 2525.04,
          "operating_expenditures": 3130346.24,
          "other_disbursements": 35810.0,
          "other_political_committee_contributions": 1219534.04,
          "other_receipts": 0.0,
          "political_party_committee_contributions": 14500.0,
          "receipts": 4147091.59,
          "refunded_individual_contributions": 35109.28,
          "refunded_other_political_committee_contributions": 11070.0,
          "refunded_political_party_committee_contributions": 0.0,
          "total_offsets_to_operating_expenditures": 0.0,
          "transaction_coverage_date": "2024-06-30T00:00:00",
          "transfers_from_other_authorized_committee": 1330840.83,
          "transfers_to_other_authorized_committee": 882.71
        },
        {
          "all_other_loans": 0.0,
          "candidate_contribution": 250000.0,
          "candidate_election_year": 2022,
          "candidate_id": "H2CA13131",
          "contribution_refunds": 24169.7,
          "contributions": 2007430.11,
          "coverage_end_date": "2022-12-31T00:00:00",
          "coverage_start_date": "2021-07-01T00:00:00",
          "cycle": null,
          "disbursements": 2614406.17,
          "election_full": true,
          "exempt_legal_accounting_disbursement": 0.0,
          "federal_funds": 0.0,
          "fundraising_disbursements": 0.0,
          "individual_contributions": 1488145.77,
          "individual_itemized_contributions": 1428032.91,
          "individual_unitemized_contributions": 60112.86,
          "last_beginning_image_number": "202301319576506408",
          "last_cash_on_hand_end_period": 25518.63,
          "last_debts_owed_by_committee": 119260.3,
          "last_debts_owed_to_committee": 0.0,
          "last_net_contributions": 15190.21,
          "last_net_operating_expenditures": 102039.47,
          "last_report_type_full": "YEAR-END",
          "last_report_year": 2022,
          "loan_repayments": 200000.0,
          "loan_repayments_candidate_loans": 200000.0,
          "loan_repayments_other_loans": 0.0,
          "loans": 200000.0,
          "loans_made_by_candidate": 200000.0,
          "net_contributions": 1983260.41,
          "net_operating_expenditures": 2224694.44,
          "offsets_to_fundraising_expenditures": 0.0,
          "offsets_to_legal_accounting": 0.0,
          "offsets_to_operating_expenditures": 3245.18,
          "operating_expenditures": 2227939.62,
          "other_disbursements": 2178.22,
          "other_political_committee_contributions": 257284.34,
          "other_receipts": 8700.0,
          "political_party_committee_contributions": 12000.0,
          "receipts": 2639924.8,
          "refunded_individual_contributions": 23169.7,
          "refunded_other_political_committee_contributions": 1000.0,
          "refunded_political_party_committee_contributions": 0.0,
          "total_offsets_to_operating_expenditures": 0.0,
          "transaction_coverage_date": "2022-12-31T00:00:00",
          "transfers_from_other_authorized_committee": 420549.51,
          "transfers_to_other_authorized_committee": 160118.63
        },
        {
          "all_other_loans": 0.0,
          "candidate_contribution": 0.0,
          "candidate_election_year": 2024,
          "candidate_id": "H2CA13131",
          "contribution_refunds": 46179.28,
          "contributions": 2813725.72,
          "coverage_end_date": "2024-10-16T00:00:00",
          "coverage_start_date": "2023-01-01T00:00:00",
          "cycle": 2024,
          "disbursements": 3213218.23,
          "election_full": false,
          "exempt_legal_accounting_disbursement": 0.0,
          "federal_funds": 0.0,
          "fundraising_disbursements": 0.0,
          "individual_contributions": 1579691.68,
          "individual_itemized_contributions": 1503246.45,
          "individual_unitemized_contributions": 76445.23,
          "last_beginning_image_number": "202305049581410021",
          "last_cash_on_hand_end_period": 959391.99,
          "last_debts_owed_by_committee": 0.0,
          "last_debts_owed_to_committee": 0.0,
          "last_net_contributions": 139662.28,
          "last_net_operating_expenditures": 1001263.13,
          "last_report_type_full": "TERMINATION REPORT",
          "last_report_year": 2024,
          "loan_repayments": 0.0,
          "loan_repayments_candidate_loans": 0.0,
          "loan_repayments_other_loans": 0.0,
          "loans": 0.0,
          "loans_made_by_candidate": 0.0,
          "net_contributions": 2767546.44,
          "net_operating_expenditures": 3127821.2,
          "offsets_to_fundraising_expenditures": 0.0,
          "offsets_to_legal_accounting": 0.0,
          "offsets_to_operating_expenditures": 2525.04,
          "operating_expenditures": 3130346.24,
          "other_disbursements": 35810.0,
          "other_political_committee_contributions": 1219534.04,
          "other_receipts": 0.0,
          "political_party_committee_contributions": 14500.0,
          "receipts": 4147091.59,
          "refunded_individual_contributions": 35109.28,
          "refunded_other_political_committee_contributions": 11070.0,
          "refunded_political_party_committee_contributions": 0.0,
          "total_offsets_to_operating_expenditures": 0.0,
          "transaction_coverage_date": "2024-06-30T00:00:00",
          "transfers_from_other_authorized_committee": 1330840.83,
          "transfers_to_other_authorized_committee": 882.71
        },
        {
          "all_other_loans": 0.0,
          "candidate_contribution": 250000.0,
          "candidate_election_year": 2022,
          "candidate_id": "H2CA13131",
          "contribution_refunds": 24169.7,
          "contributions": 2007430.11,
          "coverage_end_date": "2022-12-31T00:00:00",
          "coverage_start_date": "2021-07-01T00:00:00",
          "cycle": 2022,
          "disbursements": 2614406.17,
          "election_full": false,
          "exempt_legal_accounting_disbursement": 0.0,
          "federal_funds": 0.0,
          "fundraising_disbursements": 0.0,
          "individual_contributions": 1488145.77,
          "individual_itemized_contributions": 1428032.91,
          "individual_unitemized_contributions": 60112.86,
          "last_beginning_image_number": "202301319576506408",
          "last_cash_on_hand_end_period": 25518.63,
          "last_debts_owed_by_committee": 119260.3,
          "last_debts_owed_to_committee": 0.0,
          "last_net_contributions": 15190.21,
          "last_net_operating_expenditures": 102039.47,
          "last_report_type_full": "YEAR-END",
          "last_report_year": 2022,
          "loan_repayments": 200000.0,
          "loan_repayments_candidate_loans": 200000.0,
          "loan_repayments_other_loans": 0.0,
          "loans": 200000.0,
          "loans_made_by_candidate": 200000.0,
          "net_contributions": 1983260.41,
          "net_operating_expenditures": 2224694.44,
          "offsets_to_fundraising_expenditures": 0.0,
          "offsets_to_legal_accounting": 0.0,
          "offsets_to_operating_expenditures": 3245.18,
          "operating_expenditures": 2227939.62,
          "other_disbursements": 2178.22,
          "other_political_committee_contributions": 257284.34,
          "other_receipts": 8700.0,
          "political_party_committee_contributions": 12000.0,
          "receipts": 2639924.8,
          "refunded_individual_contributions": 23169.7,
          "refunded_other_political_committee_contributions": 1000.0,
          "refunded_political_party_committee_contributions": 0.0,
          "total_offsets_to_operating_expenditures": 0.0,
          "transaction_coverage_date": "2022-12-31T00:00:00",
          "transfers_from_other_authorized_committee": 420549.51,
          "transfers_to_other_authorized_committee": 160118.63
        }
      ]
    },
    "GRAY, ADAM C.": {
      "candidate_info": {
        "active_through": 2024,
        "candidate_id": "H2CA13115",
        "candidate_inactive": false,
        "candidate_status": "C",
        "cycles": [
          2022,
          2024
        ],
        "district": "13",
        "district_number": 13,
        "election_districts": [
          "13",
          "13"
        ],
        "election_years": [
          2022,
          2024
        ],
        "federal_funds_flag": false,
        "first_file_date": "2022-01-18",
        "has_raised_funds": true,
        "inactive_election_years": null,
        "incumbent_challenge": "C",
        "incumbent_challenge_full": "Challenger",
        "last_f2_date": "2023-02-10",
        "last_file_date": "2023-02-10",
        "load_date": "2023-08-06T21:01:25",
        "name": "GRAY, ADAM C.",
        "office": "H",
        "office_full": "House",
        "party": "DEM",
        "party_full": "DEMOCRATIC PARTY",
        "principal_committees": [
          {
            "affiliated_committee_name": "BLUE TO THE FUTURE 2024",
            "candidate_ids": [
              "H2CA13115"
            ],
            "committee_id": "C00801431",
            "committee_type": "H",
            "committee_type_full": "House",
            "cycles": [
              2022,
              2024
            ],
            "designation": "P",
            "designation_full": "Principal campaign committee",
            "filing_frequency": "Q",
            "first_f1_date": "2022-01-18",
            "first_file_date": "2022-01-18",
            "last_f1_date": "2024-09-12",
            "last_file_date": "2024-10-29",
            "name": "ADAM GRAY FOR CONGRESS",
            "organization_type": null,
            "organization_type_full": null,
            "party": "DEM",
            "party_full": "DEMOCRATIC PARTY",
            "state": "CA",
            "treasurer_name": "OLSON, MEAGAN"
          }
        ],
        "state": "CA"
      },
      "financial_data": [
        {
          "all_other_loans": 0.0,
          "candidate_contribution": 0.0,
          "candidate_election_year": 2024,
          "candidate_id": "H2CA13115",
          "contribution_refunds": 54227.31,
          "contributions": 5389616.44,
          "coverage_end_date": "2024-10-16T00:00:00",
          "coverage_start_date": "2023-01-01T00:00:00",
          "cycle": null,
          "disbursements": 4671627.25,
          "election_full": true,
          "exempt_legal_accounting_disbursement": 0.0,
          "federal_funds": 0.0,
          "fundraising_disbursements": 0.0,
          "individual_contributions": 4813067.49,
          "individual_itemized_contributions": 3854053.42,
          "individual_unitemized_contributions": 959014.07,
          "last_beginning_image_number": "202302279578749961",
          "last_cash_on_hand_end_period": 799009.45,
          "last_debts_owed_by_committee": 22422.54,
          "last_debts_owed_to_committee": 0.0,
          "last_net_contributions": 504266.7,
          "last_net_operating_expenditures": 1140190.68,
          "last_report_type_full": "TERMINATION REPORT",
          "last_report_year": 2024,
          "loan_repayments": 0.0,
          "loan_repayments_candidate_loans": 0.0,
          "loan_repayments_other_loans": 0.0,
          "loans": 0.0,
          "loans_made_by_candidate": 0.0,
          "net_contributions": 5335389.13,
          "net_operating_expenditures": 4536698.53,
          "offsets_to_fundraising_expenditures": 0.0,
          "offsets_to_legal_accounting": 0.0,
          "offsets_to_operating_expenditures": 22936.24,
          "operating_expenditures": 4559634.77,
          "other_disbursements": 57765.17,
          "other_political_committee_contributions": 562483.66,
          "other_receipts": 3709.33,
          "political_party_committee_contributions": 14065.29,
          "receipts": 5416262.01,
          "refunded_individual_contributions": 52527.31,
          "refunded_other_political_committee_contributions": 1700.0,
          "refunded_political_party_committee_contributions": 0.0,
          "total_offsets_to_operating_expenditures": 0.0,
          "transaction_coverage_date": "2024-06-30T00:00:00",
          "transfers_from_other_authorized_committee": 0.0,
          "transfers_to_other_authorized_committee": 0.0
        },
        {
          "all_other_loans": 0.0,
          "candidate_contribution": 0.0,
          "candidate_election_year": 2022,
          "candidate_id": "H2CA13115",
          "contribution_refunds": 43027.5,
          "contributions": 2384785.42,
          "coverage_end_date": "2022-12-31T00:00:00",
          "coverage_start_date": "2022-01-01T00:00:00",
          "cycle": null,
          "disbursements": 2335746.28,
          "election_full": true,
          "exempt_legal_accounting_disbursement": 0.0,
          "federal_funds": 0.0,
          "fundraising_disbursements": 0.0,
          "individual_contributions": 1824927.83,
          "individual_itemized_contributions": 1597244.49,
          "individual_unitemized_contributions": 227683.34,
          "last_beginning_image_number": "202301319575506265",
          "last_cash_on_hand_end_period": 54374.69,
          "last_debts_owed_by_committee": 61054.26,
          "last_debts_owed_to_committee": 0.0,
          "last_net_contributions": -2055.93,
          "last_net_operating_expenditures": 64261.8,
          "last_report_type_full": "YEAR-END",
          "last_report_year": 2022,
          "loan_repayments": 0.0,
          "loan_repayments_candidate_loans": 0.0,
          "loan_repayments_other_loans": 0.0,
          "loans": 0.0,
          "loans_made_by_candidate": 0.0,
          "net_contributions": 2341757.92,
          "net_operating_expenditures": 2282034.25,
          "offsets_to_fundraising_expenditures": 0.0,
          "offsets_to_legal_accounting": 0.0,
          "offsets_to_operating_expenditures": 5335.53,
          "operating_expenditures": 2287369.78,
          "other_disbursements": 5349.0,
          "other_political_committee_contributions": 554817.08,
          "other_receipts": 0.02,
          "political_party_committee_contributions": 5040.51,
          "receipts": 2390120.97,
          "refunded_individual_contributions": 40127.5,
          "refunded_other_political_committee_contributions": 2900.0,
          "refunded_political_party_committee_contributions": 0.0,
          "total_offsets_to_operating_expenditures": 0.0,
          "transaction_coverage_date": "2022-12-31T00:00:00",
          "transfers_from_other_authorized_committee": 0.0,
          "transfers_to_other_authorized_committee": 0.0
        },
        {
          "all_other_loans": 0.0,
          "candidate_contribution": 0.0,
          "candidate_election_year": 2024,
          "candidate_id": "H2CA13115",
          "contribution_refunds": 54227.31,
          "contributions": 5389616.44,
          "coverage_end_date": "2024-10-16T00:00:00",
          "coverage_start_date": "2023-01-01T00:00:00",
          "cycle": 2024,
          "disbursements": 4671627.25,
          "election_full": false,
          "exempt_legal_accounting_disbursement": 0.0,
          "federal_funds": 0.0,
          "fundraising_disbursements": 0.0,
          "individual_contributions": 4813067.49,
          "individual_itemized_contributions": 3854053.42,
          "individual_unitemized_contributions": 959014.07,
          "last_beginning_image_number": "202302279578749961",
          "last_cash_on_hand_end_period": 799009.45,
          "last_debts_owed_by_committee": 22422.54,
          "last_debts_owed_to_committee": 0.0,
          "last_net_contributions": 504266.7,
          "last_net_operating_expenditures": 1140190.68,
          "last_report_type_full": "TERMINATION REPORT",
          "last_report_year": 2024,
          "loan_repayments": 0.0,
          "loan_repayments_candidate_loans": 0.0,
          "loan_repayments_other_loans": 0.0,
          "loans": 0.0,
          "loans_made_by_candidate": 0.0,
          "net_contributions": 5335389.13,
          "net_operating_expenditures": 4536698.53,
          "offsets_to_fundraising_expenditures": 0.0,
          "offsets_to_legal_accounting": 0.0,
          "offsets_to_operating_expenditures": 22936.24,
          "operating_expenditures": 4559634.77,
          "other_disbursements": 57765.17,
          "other_political_committee_contributions": 562483.66,
          "other_receipts": 3709.33,
          "political_party_committee_contributions": 14065.29,
          "receipts": 5416262.01,
          "refunded_individual_contributions": 52527.31,
          "refunded_other_political_committee_contributions": 1700.0,
          "refunded_political_party_committee_contributions": 0.0,
          "total_offsets_to_operating_expenditures": 0.0,
          "transaction_coverage_date": "2024-06-30T00:00:00",
          "transfers_from_other_authorized_committee": 0.0,
          "transfers_to_other_authorized_committee": 0.0
        },
        {
          "all_other_loans": 0.0,
          "candidate_contribution": 0.0,
          "candidate_election_year": 2022,
          "candidate_id": "H2CA13115",
          "contribution_refunds": 43027.5,
          "contributions": 2384785.42,
          "coverage_end_date": "2022-12-31T00:00:00",
          "coverage_start_date": "2022-01-01T00:00:00",
          "cycle": 2022,
          "disbursements": 2335746.28,
          "election_full": false,
          "exempt_legal_accounting_disbursement": 0.0,
          "federal_funds": 0.0,
          "fundraising_disbursements": 0.0,
          "individual_contributions": 1824927.83,
          "individual_itemized_contributions": 1597244.49,
          "individual_unitemized_contributions": 227683.34,
          "last_beginning_image_number": "202301319575506265",
          "last_cash_on_hand_end_period": 54374.69,
          "last_debts_owed_by_committee": 61054.26,
          "last_debts_owed_to_committee": 0.0,
          "last_net_contributions": -2055.93,
          "last_net_operating_expenditures": 64261.8,
          "last_report_type_full": "YEAR-END",
          "last_report_year": 2022,
          "loan_repayments": 0.0,
          "loan_repayments_candidate_loans": 0.0,
          "loan_repayments_other_loans": 0.0,
          "loans": 0.0,
          "loans_made_by_candidate": 0.0,
          "net_contributions": 2341757.92,
          "net_operating_expenditures": 2282034.25,
          "offsets_to_fundraising_expenditures": 0.0,
          "offsets_to_legal_accounting": 0.0,
          "offsets_to_operating_expenditures": 5335.53,
          "operating_expenditures": 2287369.78,
          "other_disbursements": 5349.0,
          "other_political_committee_contributions": 554817.08,
          "other_receipts": 0.02,
          "political_party_committee_contributions": 5040.51,
          "receipts": 2390120.97,
          "refunded_individual_contributions": 40127.5,
          "refunded_other_political_committee_contributions": 2900.0,
          "refunded_political_party_committee_contributions": 0.0,
          "total_offsets_to_operating_expenditures": 0.0,
          "transaction_coverage_date": "2022-12-31T00:00:00",
          "transfers_from_other_authorized_committee": 0.0,
          "transfers_to_other_authorized_committee": 0.0
        }
      ]
    },
    "MARTINEZ, DIEGO J": {
      "candidate_info": {
        "active_through": 2024,
        "candidate_id": "H2CA13123",
        "candidate_inactive": false,
        "candidate_status": "N",
        "cycles": [
          2022,
          2024
        ],
        "district": "13",
        "district_number": 13,
        "election_districts": [
          "13",
          "13"
        ],
        "election_years": [
          2022,
          2024
        ],
        "federal_funds_flag": false,
        "first_file_date": "2022-02-01",
        "has_raised_funds": true,
        "inactive_election_years": null,
        "incumbent_challenge": "C",
        "incumbent_challenge_full": "Challenger",
        "last_f2_date": "2023-04-12",
        "last_file_date": "2023-04-12",
        "load_date": "2023-04-16T21:09:31",
        "name": "MARTINEZ, DIEGO J",
        "office": "H",
        "office_full": "House",
        "party": "REP",
        "party_full": "REPUBLICAN PARTY",
        "principal_committees": [
          {
            "affiliated_committee_name": "NONE",
            "candidate_ids": [
              "H2CA13123"
            ],
            "committee_id": "C00803452",
            "committee_type": "H",
            "committee_type_full": "House",
            "cycles": [
              2022,
              2024
            ],
            "designation": "P",
            "designation_full": "Principal campaign committee",
            "filing_frequency": "Q",
            "first_f1_date": "2022-02-01",
            "first_file_date": "2022-02-01",
            "last_f1_date": "2022-08-24",
            "last_file_date": "2024-10-18",
            "name": "MARTINEZ FOR CONGRESS",
            "organization_type": null,
            "organization_type_full": null,
            "party": "REP",
            "party_full": "REPUBLICAN PARTY",
            "state": "CA",
            "treasurer_name": "MONTGOMERY, THOMAS"
          }
        ],
        "state": "CA"
      },
      "financial_data": [
        {
          "all_other_loans": 0.0,
          "candidate_contribution": 0.0,
          "candidate_election_year": 2024,
          "candidate_id": "H2CA13123",
          "contribution_refunds": 0.0,
          "contributions": 0.0,
          "coverage_end_date": "2024-10-16T00:00:00",
          "coverage_start_date": "2023-01-01T00:00:00",
          "cycle": null,
          "disbursements": 890.0,
          "election_full": true,
          "exempt_legal_accounting_disbursement": 0.0,
          "federal_funds": 0.0,
          "fundraising_disbursements": 0.0,
          "individual_contributions": 0.0,
          "individual_itemized_contributions": 0.0,
          "individual_unitemized_contributions": 0.0,
          "last_beginning_image_number": "202410189698614025",
          "last_cash_on_hand_end_period": 130.7,
          "last_debts_owed_by_committee": 2268.58,
          "last_debts_owed_to_committee": 0.0,
          "last_net_contributions": 0.0,
          "last_net_operating_expenditures": 0.0,
          "last_report_type_full": "PRE-GENERAL",
          "last_report_year": 2024,
          "loan_repayments": 0.0,
          "loan_repayments_candidate_loans": 0.0,
          "loan_repayments_other_loans": 0.0,
          "loans": 0.0,
          "loans_made_by_candidate": 0.0,
          "net_contributions": 0.0,
          "net_operating_expenditures": 890.0,
          "offsets_to_fundraising_expenditures": 0.0,
          "offsets_to_legal_accounting": 0.0,
          "offsets_to_operating_expenditures": 0.0,
          "operating_expenditures": 890.0,
          "other_disbursements": 0.0,
          "other_political_committee_contributions": 0.0,
          "other_receipts": 0.0,
          "political_party_committee_contributions": 0.0,
          "receipts": 0.0,
          "refunded_individual_contributions": 0.0,
          "refunded_other_political_committee_contributions": 0.0,
          "refunded_political_party_committee_contributions": 0.0,
          "total_offsets_to_operating_expenditures": 0.0,
          "transaction_coverage_date": "2024-10-16T00:00:00",
          "transfers_from_other_authorized_committee": 0.0,
          "transfers_to_other_authorized_committee": 0.0
        },
        {
          "all_other_loans": 0.0,
          "candidate_contribution": 0.0,
          "candidate_election_year": 2022,
          "candidate_id": "H2CA13123",
          "contribution_refunds": 0.0,
          "contributions": 3135.0,
          "coverage_end_date": "2022-12-31T00:00:00",
          "coverage_start_date": "2022-01-01T00:00:00",
          "cycle": null,
          "disbursements": 2114.3,
          "election_full": true,
          "exempt_legal_accounting_disbursement": 0.0,
          "federal_funds": 0.0,
          "fundraising_disbursements": 0.0,
          "individual_contributions": 2135.0,
          "individual_itemized_contributions": 1625.0,
          "individual_unitemized_contributions": 510.0,
          "last_beginning_image_number": "202301149574694766",
          "last_cash_on_hand_end_period": 1020.7,
          "last_debts_owed_by_committee": 2268.58,
          "last_debts_owed_to_committee": 0.0,
          "last_net_contributions": 0.0,
          "last_net_operating_expenditures": 280.0,
          "last_report_type_full": "YEAR-END",
          "last_report_year": 2022,
          "loan_repayments": 0.0,
          "loan_repayments_candidate_loans": 0.0,
          "loan_repayments_other_loans": 0.0,
          "loans": 0.0,
          "loans_made_by_candidate": 0.0,
          "net_contributions": 3135.0,
          "net_operating_expenditures": 2114.3,
          "offsets_to_fundraising_expenditures": 0.0,
          "offsets_to_legal_accounting": 0.0,
          "offsets_to_operating_expenditures": 0.0,
          "operating_expenditures": 2114.3,
          "other_disbursements": 0.0,
          "other_political_committee_contributions": 1000.0,
          "other_receipts": 0.0,
          "political_party_committee_contributions": 0.0,
          "receipts": 3135.0,
          "refunded_individual_contributions": 0.0,
          "refunded_other_political_committee_contributions": 0.0,
          "refunded_political_party_committee_contributions": 0.0,
          "total_offsets_to_operating_expenditures": 0.0,
          "transaction_coverage_date": "2022-12-31T00:00:00",
          "transfers_from_other_authorized_committee": 0.0,
          "transfers_to_other_authorized_committee": 0.0
        },
        {
          "all_other_loans": 0.0,
          "candidate_contribution": 0.0,
          "candidate_election_year": 2024,
          "candidate_id": "H2CA13123",
          "contribution_refunds": 0.0,
          "contributions": 0.0,
          "coverage_end_date": "2024-10-16T00:00:00",
          "coverage_start_date": "2023-01-01T00:00:00",
          "cycle": 2024,
          "disbursements": 890.0,
          "election_full": false,
          "exempt_legal_accounting_disbursement": 0.0,
          "federal_funds": 0.0,
          "fundraising_disbursements": 0.0,
          "individual_contributions": 0.0,
          "individual_itemized_contributions": 0.0,
          "individual_unitemized_contributions": 0.0,
          "last_beginning_image_number": "202410189698614025",
          "last_cash_on_hand_end_period": 130.7,
          "last_debts_owed_by_committee": 2268.58,
          "last_debts_owed_to_committee": 0.0,
          "last_net_contributions": 0.0,
          "last_net_operating_expenditures": 0.0,
          "last_report_type_full": "PRE-GENERAL",
          "last_report_year": 2024,
          "loan_repayments": 0.0,
          "loan_repayments_candidate_loans": 0.0,
          "loan_repayments_other_loans": 0.0,
          "loans": 0.0,
          "loans_made_by_candidate": 0.0,
          "net_contributions": 0.0,
          "net_operating_expenditures": 890.0,
          "offsets_to_fundraising_expenditures": 0.0,
          "offsets_to_legal_accounting": 0.0,
          "offsets_to_operating_expenditures": 0.0,
          "operating_expenditures": 890.0,
          "other_disbursements": 0.0,
          "other_political_committee_contributions": 0.0,
          "other_receipts": 0.0,
          "political_party_committee_contributions": 0.0,
          "receipts": 0.0,
          "refunded_individual_contributions": 0.0,
          "refunded_other_political_committee_contributions": 0.0,
          "refunded_political_party_committee_contributions": 0.0,
          "total_offsets_to_operating_expenditures": 0.0,
          "transaction_coverage_date": "2024-10-16T00:00:00",
          "transfers_from_other_authorized_committee": 0.0,
          "transfers_to_other_authorized_committee": 0.0
        },
        {
          "all_other_loans": 0.0,
          "candidate_contribution": 0.0,
          "candidate_election_year": 2022,
          "candidate_id": "H2CA13123",
          "contribution_refunds": 0.0,
          "contributions": 3135.0,
          "coverage_end_date": "2022-12-31T00:00:00",
          "coverage_start_date": "2022-01-01T00:00:00",
          "cycle": 2022,
          "disbursements": 2114.3,
          "election_full": false,
          "exempt_legal_accounting_disbursement": 0.0,
          "federal_funds": 0.0,
          "fundraising_disbursements": 0.0,
          "individual_contributions": 2135.0,
          "individual_itemized_contributions": 1625.0,
          "individual_unitemized_contributions": 510.0,
          "last_beginning_image_number": "202301149574694766",
          "last_cash_on_hand_end_period": 1020.7,
          "last_debts_owed_by_committee": 2268.58,
          "last_debts_owed_to_committee": 0.0,
          "last_net_contributions": 0.0,
          "last_net_operating_expenditures": 280.0,
          "last_report_type_full": "YEAR-END",
          "last_report_year": 2022,
          "loan_repayments": 0.0,
          "loan_repayments_candidate_loans": 0.0,
          "loan_repayments_other_loans": 0.0,
          "loans": 0.0,
          "loans_made_by_candidate": 0.0,
          "net_contributions": 3135.0,
          "net_operating_expenditures": 2114.3,
          "offsets_to_fundraising_expenditures": 0.0,
          "offsets_to_legal_accounting": 0.0,
          "offsets_to_operating_expenditures": 0.0,
          "operating_expenditures": 2114.3,
          "other_disbursements": 0.0,
          "other_political_committee_contributions": 1000.0,
          "other_receipts": 0.0,
          "political_party_committee_contributions": 0.0,
          "receipts": 3135.0,
          "refunded_individual_contributions": 0.0,
          "refunded_other_political_committee_contributions": 0.0,
          "refunded_political_party_committee_contributions": 0.0,
          "total_offsets_to_operating_expenditures": 0.0,
          "transaction_coverage_date": "2022-12-31T00:00:00",
          "transfers_from_other_authorized_committee": 0.0,
          "transfers_to_other_authorized_committee": 0.0
        }
      ]
    }
  }
}


================================================================================
File: data/visualizations/CA13_analysis_report.txt
================================================================================

CA-13 Congressional District Analysis Report
==================================================

Total CVAP: 383,974
Expected Voters: 234,830
Overall Expected Turnout: 61.2%

Demographic Analysis:
--------------------

Hispanic:
  CVAP: 197,495
  Expected Turnout: 106,647
  Turnout Rate: 54.0%
  Share of Total CVAP: 51.4%
  Share of Expected Voters: 45.4%

Black:
  CVAP: 16,130
  Expected Turnout: 10,162
  Turnout Rate: 63.0%
  Share of Total CVAP: 4.2%
  Share of Expected Voters: 4.3%

Asian:
  CVAP: 24,392
  Expected Turnout: 14,391
  Turnout Rate: 59.0%
  Share of Total CVAP: 6.4%
  Share of Expected Voters: 6.1%

White:
  CVAP: 145,957
  Expected Turnout: 103,629
  Turnout Rate: 71.0%
  Share of Total CVAP: 38.0%
  Share of Expected Voters: 44.1%



================================================================================
File: data/visualizations/detailed_maps/precinct_statistics.md
================================================================================

# CA-13 Precinct-Level Statistics

## Voting Patterns
- Total Precincts: 190
- Average Democratic Vote Share: 89.8%
- Median Democratic Vote Share: 92.4%
- Standard Deviation: 10.0%

## Geographic Distribution
- Average Precinct Size: 2.48 km²
- Largest Precinct: 28.03 km²
- Smallest Precinct: 0.01 km²

## Voter Turnout
- Total Votes Cast: 369,381
- Average Votes per Precinct: 1944
- Highest Turnout Precinct: 4402
- Lowest Turnout Precinct: 0

## Key Observations
1. Strong Democratic performance across most precincts
2. Significant variation in precinct sizes
3. Turnout density correlates with urban areas
4. Geographic patterns suggest urban-rural divide



================================================================================
File: data/ca_cong_adopted_2021/README.txt
================================================================================

2021 California Congressional Plan

The 2020 California Citizens Redistricting Commission approved this plan on 12/26/2021

##Redistricting Data Hub (RDH) Retrieval Date
01/05/2022

##Sources
This dataset was retrieved from We Draw the Lines CA at https://www.wedrawthelinesca.org/final_maps

##Processing
The RDH retrieved the data from the source listed and did not modify any of the data.

##Additional Notes
Enclosed in this zip file the shapefile for California's Congressional Districts ("CD_Final 2021-12-20.shp") and supporting files, a block equivalency file ("CD Final equiv.csv"), summary statistics ("CD_Proposed_Final_Stats_(1).pdf"), and an image of the Congressional Districts map ("CD_Final.png").

To keep track of a state's adopted maps, go to All About Redistricting https://redistricting.lls.edu/
For any additional questions, please email info@redistrictingdatahub.org


================================================================================
File: data/spatial/raw/ca_vest_20/README.txt
================================================================================

2020 California precinct and election results shapefile.

## RDH Date retrieval
09/29/2021

## Sources
Election results primarily from the California Statewide Database (https://statewidedatabase.org/d10/g20.html). Precinct results that were combined by the Statewide Database were separated according to the 2020 Statement of the Vote from the registrars of the following counties: Glenn, El Dorado, Imperial, Inyo, Madera, Mendocino, San Joaquin, San Luis Obispo, Shasta, Sierra, Siskiyou, Sutter, Tuolumne.
Precinct shapefiles were obtained directly from nearly all counties. The precinct shapefiles for Modoc County and Sierra County were obtained from the Los Angeles Times Data Desk GitHub. For Trinity County the precinct shapefile was generated using the parcel precinct assignments in the General Plan shapefile. California counties routinely consolidate precincts based on polling place assignments and ballot styles for a given election. The majority of the county shapefiles featured regular precincts rather than consolidated precincts. Wherever necessary the registration precincts were consolidated to match the election results using the November 2020 consolidation reports from the respective counties.

## Fields metadata

Vote Column Label Format
------------------------
Columns reporting votes follow a standard label pattern. One example is:
G16PREDCli
The first character is G for a general election, P for a primary, C for a caucus, R for a runoff, S for a special.
Characters 2 and 3 are the year of the election.
Characters 4-6 represent the office type (see list below).
Character 7 represents the party of the candidate.
Characters 8-10 are the first three letters of the candidate's last name.

Office Codes
AGR - Agriculture Commissioner
ATG - Attorney General
AUD - Auditor
COC - Corporation Commissioner
COU - City Council Member
DEL - Delegate to the U.S. House
GOV - Governor
H## - U.S. House, where ## is the district number. AL: at large.
INS - Insurance Commissioner
LAB - Labor Commissioner
LAN - Commissioner of Public Lands
LTG - Lieutenant Governor
PRE - President
PSC - Public Service Commissioner
RRC - Railroad Commissioner
SAC - State Appeals Court (in AL: Civil Appeals)
SCC - State Court of Criminal Appeals
SOS - Secretary of State
SSC - State Supreme Court
SPI - Superintendent of Public Instruction
TRE - Treasurer
USS - U.S. Senate

Party Codes
D and R will always represent Democrat and Republican, respectively.
See the state-specific notes for the remaining codes used in a particular file; note that third-party candidates may appear on the ballot under different party labels in different states.


## Fields
G20PREDBID - Joseph R. Biden (Democratic Party)
G20PRERTRU - Donald J. Trump (Republican Party)
G20PRELJOR - Jo Jorgensen (Libertarian Party)
G20PREGHAW - Howie Hawkins (Green Party)
G20PREAFUE - Roque "Rocky" De La Fuente Guerra (American Independent Party)
G20PREPLAR - Gloria La Riva (Peace and Freedom Party)

## Processing Steps
Butte County amended its precinct results after the state certification deadline. The amended results are higher than the certified results as follows: Biden (D) +389, Trump (R) +89, Jorgensen (L) + 15, Hawkins (G) + 3, De La Fuente (A) + 2, La Riva (S) +1. The precinct results for Sutter County add 1 Biden vote and 2 Trump votes more than the certified totals. 
In Los Angeles County a scattering of ballots were reported by canvassing batch rather than by precinct. These add up to 54 Biden votes and 23 Trump votes. In San Diego County a scattering of ballots were reported from VBM "pseudo" precincts that are not assigned to a polling location. These add up to 93 Biden votes, 69 Trump votes, and 3 Jorgensen votes. 

In Sierra County, Precinct 23 (Sierra City 4) was added according to the 2018 PDF map provided by the county clerk. In Imperial County, Siskiyou County, and Sutter County regular precincts were split using water districts, fire districts, and school districts, respectively, consistent with the November 2020 district reports. In Siskiyou County, Weed 1 and Weed 2 were split using the voter assignment street list and the parcel shapefile.
A scattering of precincts in Los Angeles County do not feature a district assignment for either California State Senate or for Board of Equalization. In these instances the consolidated precincts cross district boundaries in areas where the relevant districts were not on the ballot for the November 2020 general election.


================================================================================
File: src/district_processor.py
================================================================================

import geopandas as gpd
import pandas as pd
import matplotlib.pyplot as plt
from pathlib import Path
import os

class CA13Processor:
    def __init__(self):
        self.base_dir = Path.cwd()
        self.data_dir = self.base_dir / 'data'
        self.district_data = None
        self.ca13_data = None
        
    def process_district_data(self):
        """Process the 2021 Final District data"""
        try:
            # Path to shapefile
            shapefile_path = self.data_dir / 'ca_cong_adopted_2021' / 'CD_Final 2021-12-20.shp'
            
            if not shapefile_path.exists():
                print(f"Error: Shapefile not found at {shapefile_path}")
                return False
            
            print("Loading district data...")
            self.district_data = gpd.read_file(shapefile_path)
            
            # Look for district identifier in the data
            print("\nAvailable columns:", self.district_data.columns.tolist())
            
            # Try to find district column (common names in CA redistricting data)
            district_cols = ['DISTRICT', 'District', 'CD', 'CD_NUM', 'CONG_DIST']
            district_col = None
            
            for col in district_cols:
                if col in self.district_data.columns:
                    district_col = col
                    break
            
            if district_col is None:
                print("\nCould not automatically find district column.")
                print("Please select the column containing district numbers:")
                for i, col in enumerate(self.district_data.columns):
                    print(f"{i}: {col}")
                col_idx = int(input("Enter column number: "))
                district_col = self.district_data.columns[col_idx]
            
            # Extract CA-13
            print(f"\nExtracting District 13 using column: {district_col}")
            self.ca13_data = self.district_data[
                self.district_data[district_col].astype(str).str.strip() == '13'
            ]
            
            if len(self.ca13_data) == 0:
                print("Error: Could not find District 13")
                print("Available districts:", 
                      sorted(self.district_data[district_col].unique()))
                return False
            
            # Save processed data
            output_dir = self.data_dir / 'processed'
            output_dir.mkdir(exist_ok=True)
            
            output_path = output_dir / 'CA13_boundary.geojson'
            self.ca13_data.to_file(output_path, driver='GeoJSON')
            print(f"\nSaved CA-13 boundary to: {output_path}")
            
            # Create visualizations
            self.create_district_maps()
            
            return True
            
        except Exception as e:
            print(f"Error processing district data: {e}")
            return False
    
    def create_district_maps(self):
        """Create maps of CA-13"""
        if self.ca13_data is None:
            print("No data loaded")
            return
        
        try:
            # Create output directory for maps
            maps_dir = self.data_dir / 'maps'
            maps_dir.mkdir(exist_ok=True)
            
            # Create two maps: state context and district detail
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 7))
            
            # State context map
            self.district_data.plot(ax=ax1, color='lightgray', edgecolor='black')
            self.ca13_data.plot(ax=ax1, color='red', edgecolor='black')
            ax1.set_title('CA-13 Location in California')
            ax1.axis('equal')
            
            # District detail map
            self.ca13_data.plot(ax=ax2, color='lightblue', edgecolor='black')
            ax2.set_title('CA-13 District Detail')
            ax2.axis('equal')
            
            # Remove axis ticks for cleaner look
            for ax in [ax1, ax2]:
                ax.set_xticks([])
                ax.set_yticks([])
            
            plt.tight_layout()
            
            # Save maps
            map_path = maps_dir / 'CA13_maps.png'
            plt.savefig(map_path, dpi=300, bbox_inches='tight')
            print(f"\nSaved maps to: {map_path}")
            plt.show()
            
        except Exception as e:
            print(f"Error creating maps: {e}")
    
    def analyze_district_data(self):
        """Analyze district characteristics"""
        if self.ca13_data is None:
            print("No data loaded")
            return
        
        print("\nCA-13 District Analysis:")
        print("-" * 50)
        print(f"Number of geometric features: {len(self.ca13_data)}")
        print(f"Coordinate system: {self.ca13_data.crs}")
        
        # Calculate area (if applicable)
        if self.ca13_data.crs and self.ca13_data.crs.is_projected:
            area_km2 = self.ca13_data.geometry.area.sum() / 1_000_000  # Convert to km²
            print(f"Approximate district area: {area_km2:.2f} km²")
        
        print("\nAvailable attributes:")
        for col in self.ca13_data.columns:
            if col != 'geometry':
                print(f"- {col}: {self.ca13_data[col].iloc[0]}")
        print("-" * 50)

if __name__ == "__main__":
    processor = CA13Processor()
    
    print("CA-13 District Data Processor")
    print("=" * 50)
    
    if processor.process_district_data():
        processor.analyze_district_data()
        print("\nProcessing complete! Check the 'data/processed' and 'data/maps' directories for outputs.")
    else:
        print("\nProcessing failed. Please check the error messages above.")



================================================================================
File: src/demographic_analyzer.py
================================================================================

import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path

class CA13DemographicAnalyzer:
    def __init__(self):
        self.data_dir = Path('data')
        self.processed_dir = self.data_dir / 'processed'
        self.output_dir = self.data_dir / 'analysis'
        self.output_dir.mkdir(exist_ok=True)
        self.district_data = None
        
    def load_data(self):
        """Load the processed CA-13 data"""

        try:
            filepath = self.processed_dir / 'CA13_boundary.geojson'
            self.district_data = gpd.read_file(filepath)
            print("Successfully loaded CA-13 data")
            return True
        except Exception as e:
            print(f"Error loading data: {e}")
            return False
    
    def analyze_demographics(self):
        """Analyze demographic composition of CA-13"""
        if self.district_data is None:
            print("No data loaded")
            return
        
        # Extract demographic data
        demographics = {
            'Total Population': self.district_data['POPULATION'].iloc[0],
            'Citizen Voting Age Population': self.district_data['CVAP_19'].iloc[0],
            'Hispanic CVAP': self.district_data['HSP_CVAP_1'].iloc[0],
            'Black (Non-Hispanic) CVAP': self.district_data['DOJ_NH_BLK'].iloc[0],
            'Asian (Non-Hispanic) CVAP': self.district_data['DOJ_NH_ASN'].iloc[0],
            'White (Non-Hispanic) CVAP': self.district_data['NH_WHT_CVA'].iloc[0]
        }
        
        # Calculate percentages
        cvap_total = demographics['Citizen Voting Age Population']
        demographic_pcts = {
            'Hispanic': (demographics['Hispanic CVAP'] / cvap_total) * 100,
            'Black': (demographics['Black (Non-Hispanic) CVAP'] / cvap_total) * 100,
            'Asian': (demographics['Asian (Non-Hispanic) CVAP'] / cvap_total) * 100,
            'White': (demographics['White (Non-Hispanic) CVAP'] / cvap_total) * 100
        }
        
        # Create summary report
        print("\nCA-13 Demographic Analysis")
        print("=" * 50)
        print(f"Total Population: {demographics['Total Population']:,.0f}")
        print(f"Citizen Voting Age Population: {cvap_total:,.0f}")
        print("\nCVAP Demographic Breakdown:")
        for group, pct in demographic_pcts.items():
            print(f"{group}: {pct:.1f}%")
        
        # Create visualization
        self.create_demographic_plots(demographic_pcts)
        
        # Save analysis to file
        self.save_analysis(demographics, demographic_pcts)
    
    def create_demographic_plots(self, demographic_pcts):
        """Create visualizations of demographic data"""
        # Pie chart
        plt.figure(figsize=(12, 5))
        
        plt.subplot(1, 2, 1)
        plt.pie(demographic_pcts.values(), labels=demographic_pcts.keys(), autopct='%1.1f%%')
        plt.title('CA-13 CVAP Demographic Distribution')
        
        # Bar chart
        plt.subplot(1, 2, 2)
        bars = plt.bar(demographic_pcts.keys(), demographic_pcts.values())
        plt.title('CA-13 CVAP Demographics')
        plt.ylabel('Percentage')
        plt.xticks(rotation=45)
        
        # Add percentage labels on bars
        for bar in bars:
            height = bar.get_height()
            plt.text(bar.get_x() + bar.get_width()/2., height,
                    f'{height:.1f}%', ha='center', va='bottom')
        
        plt.tight_layout()
        
        # Save the plots
        plt.savefig(self.output_dir / 'CA13_demographics.png')
        print(f"\nSaved demographic visualizations to: {self.output_dir / 'CA13_demographics.png'}")
        plt.show()
    
    def save_analysis(self, demographics, demographic_pcts):
        """Save analysis results to file"""
        report_path = self.output_dir / 'CA13_demographic_analysis.txt'
        
        with open(report_path, 'w') as f:
            f.write("CA-13 Congressional District Demographic Analysis\n")
            f.write("=" * 50 + "\n\n")
            
            f.write("Population Statistics:\n")
            f.write("-" * 20 + "\n")
            for key, value in demographics.items():
                f.write(f"{key}: {value:,.0f}\n")
            
            f.write("\nCVAP Demographic Percentages:\n")
            f.write("-" * 20 + "\n")
            for group, pct in demographic_pcts.items():
                f.write(f"{group}: {pct:.1f}%\n")
            
            f.write("\nDistrict Properties:\n")
            f.write("-" * 20 + "\n")
            f.write(f"Ideal Value: {self.district_data['IDEAL_VALU'].iloc[0]:,.0f}\n")
            f.write(f"Deviation: {self.district_data['DEVIATION'].iloc[0]:,.0f}\n")
            f.write(f"Deviation Percentage: {self.district_data['F_DEVIATIO'].iloc[0]:.2f}%\n")
        
        print(f"\nSaved detailed analysis to: {report_path}")

if __name__ == "__main__":
    analyzer = CA13DemographicAnalyzer()
    print("Entry")
    if analyzer.load_data():
        analyzer.analyze_demographics()
    else:
        print("Failed to load data. Please ensure the processed data file exists.")



================================================================================
File: src/county-data-processor.py
================================================================================

import pandas as pd
import numpy as np
from pathlib import Path
import json
import re

class CountyDataProcessor:
    def __init__(self):
        self.data_dir = Path('data/election_data')
        self.county_dir = self.data_dir / 'county_data'
        self.county_dir.mkdir(exist_ok=True)
        
        # 2022 CA-13 County Data Template
        self.county_template = {
            'Fresno': {
                'precincts_in_ca13': [],
                'total_votes': 0,
                'democratic_votes': 0,
                'republican_votes': 0,
                'registered_voters': 0
            },
            'Madera': {
                'precincts_in_ca13': [],
                'total_votes': 0,
                'democratic_votes': 0,
                'republican_votes': 0,
                'registered_voters': 0
            },
            'Merced': {
                'precincts_in_ca13': [],
                'total_votes': 0,
                'democratic_votes': 0,
                'republican_votes': 0,
                'registered_voters': 0
            },
            'San Joaquin': {
                'precincts_in_ca13': [],
                'total_votes': 0,
                'democratic_votes': 0,
                'republican_votes': 0,
                'registered_voters': 0
            },
            'Stanislaus': {
                'precincts_in_ca13': [],
                'total_votes': 0,
                'democratic_votes': 0,
                'republican_votes': 0,
                'registered_voters': 0
            }
        }
    
    def create_county_templates(self):
        """Create data entry templates for each county"""
        for county in self.county_template.keys():
            county_file = self.county_dir / f"{county.lower().replace(' ', '_')}_template.csv"
            
            # Create template DataFrame
            df = pd.DataFrame(columns=[
                'precinct_id',
                'precinct_name',
                'in_ca13',  # Yes/No flag
                'registered_voters',
                'total_votes',
                'democratic_votes',
                'republican_votes',
                'other_votes'
            ])
            
            df.to_csv(county_file, index=False)
            print(f"Created template for {county}: {county_file}")
    
    def process_county_data(self, county_name):
        """Process election data for a specific county"""
        county_file = self.county_dir / f"{county_name.lower().replace(' ', '_')}_data.csv"
        
        if not county_file.exists():
            print(f"No data file found for {county_name}")
            return None
        
        try:
            # Load county data
            df = pd.read_csv(county_file)
            
            # Filter for precincts in CA-13
            ca13_precincts = df[df['in_ca13'] == 'Yes']
            
            # Calculate county totals
            county_summary = {
                'precincts_in_ca13': ca13_precincts['precinct_id'].tolist(),
                'total_votes': ca13_precincts['total_votes'].sum(),
                'democratic_votes': ca13_precincts['democratic_votes'].sum(),
                'republican_votes': ca13_precincts['republican_votes'].sum(),
                'registered_voters': ca13_precincts['registered_voters'].sum()
            }
            
            return county_summary
            
        except Exception as e:
            print(f"Error processing {county_name} data: {e}")
            return None
    
    def summarize_district_results(self):
        """Combine all county data and summarize district results"""
        district_summary = {
            'total_registered': 0,
            'total_votes': 0,
            'democratic_votes': 0,
            'republican_votes': 0,
            'county_breakdown': {}
        }
        
        for county in self.county_template.keys():
            county_data = self.process_county_data(county)
            
            if county_data:
                district_summary['total_registered'] += county_data['registered_voters']
                district_summary['total_votes'] += county_data['total_votes']
                district_summary['democratic_votes'] += county_data['democratic_votes']
                district_summary['republican_votes'] += county_data['republican_votes']
                
                # Calculate county-specific percentages
                total_county_votes = county_data['total_votes']
                if total_county_votes > 0:
                    district_summary['county_breakdown'][county] = {
                        'total_votes': total_county_votes,
                        'democratic_percentage': (county_data['democratic_votes'] / total_county_votes) * 100,
                        'republican_percentage': (county_data['republican_votes'] / total_county_votes) * 100
                    }
        
        # Calculate district-wide percentages
        total_votes = district_summary['total_votes']
        if total_votes > 0:
            district_summary['democratic_percentage'] = (district_summary['democratic_votes'] / total_votes) * 100
            district_summary['republican_percentage'] = (district_summary['republican_votes'] / total_votes) * 100
            district_summary['turnout'] = (total_votes / district_summary['total_registered']) * 100
        
        self.save_district_summary(district_summary)
        return district_summary
    
    def save_district_summary(self, summary):
        """Save district summary to file"""
        summary_file = self.data_dir / 'ca13_2022_summary.json'
        
        with open(summary_file, 'w') as f:
            json.dump(summary, f, indent=4)
        
        print(f"\nSaved district summary to: {summary_file}")
        
        # Create a readable report
        report_file = self.data_dir / 'ca13_2022_report.txt'
        
        with open(report_file, 'w') as f:
            f.write("CA-13 2022 Election Results Summary\n")
            f.write("=" * 50 + "\n\n")
            
            f.write("District-Wide Results:\n")
            f.write("-" * 20 + "\n")
            f.write(f"Registered Voters: {summary['total_registered']:,}\n")
            f.write(f"Total Votes Cast: {summary['total_votes']:,}\n")
            f.write(f"Turnout: {summary['turnout']:.1f}%\n\n")
            
            f.write("Vote Distribution:\n")
            f.write(f"Democratic: {summary['democratic_percentage']:.1f}%")
            f.write(f" ({summary['democratic_votes']:,} votes)\n")
            f.write(f"Republican: {summary['republican_percentage']:.1f}%")
            f.write(f" ({summary['republican_votes']:,} votes)\n\n")
            
            f.write("County Breakdown:\n")
            for county, data in summary['county_breakdown'].items():
                f.write(f"\n{county} County:\n")
                f.write(f"  Total Votes: {data['total_votes']:,}\n")
                f.write(f"  Democratic: {data['democratic_percentage']:.1f}%\n")
                f.write(f"  Republican: {data['republican_percentage']:.1f}%\n")
        
        print(f"Created detailed report: {report_file}")

if __name__ == "__main__":
    processor = CountyDataProcessor()
    
    print("CA-13 County Election Data Processor")
    print("=" * 50)
    
    # Create templates for data entry
    processor.create_county_templates()
    
    print("\nNext steps:")
    print("1. Fill in the county templates with 2022 election data")
    print("2. Save each county's data as '[county_name]_data.csv'")
    print("3. Run this script again to process the data")
    
    print("\nData collection tips:")
    print("- Focus on one county at a time")
    print("- Mark precincts as 'Yes' in the 'in_ca13' column if they're part of CA-13")
    print("- Double-check precinct numbers against district maps")
    print("- Document any data sources or notes in a separate text file")



================================================================================
File: src/election_analyzer.py
================================================================================

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import json

class CA13ElectionAnalyzer:
    def __init__(self):
        self.data_dir = Path('data')
        self.analysis_dir = self.data_dir / 'analysis'
        self.processed_dir = self.data_dir / 'processed'
        self.demographic_data = None
        self.total_cvap = 393416  # From previous analysis
        
    def analyze_voter_potential(self):
        """Analyze potential voter turnout based on demographics"""
        # Load demographic analysis
        with open(self.analysis_dir / 'CA13_demographic_analysis.txt', 'r') as f:
            demographic_text = f.read()
        
        print("CA-13 Voter Analysis")
        print("=" * 50)
        
        # Historical turnout rates by demographic (national averages)
        # Source: U.S. Census Bureau, Current Population Survey
        historical_turnout = {
            'Hispanic': 0.54,  # 54% turnout in 2020
            'Black': 0.63,    # 63% turnout in 2020
            'Asian': 0.59,    # 59% turnout in 2020
            'White': 0.71     # 71% turnout in 2020
        }
        
        # Calculate potential voters by demographic
        demographic_voters = {}
        total_potential_voters = 0
        
        for group, turnout_rate in historical_turnout.items():
            # Extract percentage from previous analysis
            if group == 'Hispanic':
                pct = 0.502  # 50.2%
            elif group == 'Black':
                pct = 0.041  # 4.1%
            elif group == 'Asian':
                pct = 0.062  # 6.2%
            elif group == 'White':
                pct = 0.371  # 37.1%
                
            eligible_voters = self.total_cvap * pct
            potential_voters = eligible_voters * turnout_rate
            demographic_voters[group] = {
                'eligible': eligible_voters,
                'potential_turnout': potential_voters,
                'turnout_rate': turnout_rate
            }
            total_potential_voters += potential_voters
        
        self.create_turnout_analysis(demographic_voters, total_potential_voters)
        self.create_turnout_visualizations(demographic_voters)
        self.save_turnout_analysis(demographic_voters, total_potential_voters)
        
    def create_turnout_analysis(self, demographic_voters, total_potential_voters):
        """Print detailed turnout analysis"""
        print("\nPotential Voter Turnout Analysis:")
        print("-" * 50)
        print(f"Total CVAP: {self.total_cvap:,.0f}")
        print(f"Estimated Total Turnout: {total_potential_voters:,.0f}")
        print(f"Estimated Turnout Rate: {(total_potential_voters/self.total_cvap)*100:.1f}%")
        
        print("\nBreakdown by Demographic:")
        for group, data in demographic_voters.items():
            print(f"\n{group}:")
            print(f"  Eligible Voters: {data['eligible']:,.0f}")
            print(f"  Expected Turnout: {data['potential_turnout']:,.0f}")
            print(f"  Historical Turnout Rate: {data['turnout_rate']*100:.1f}%")
            print(f"  % of Total Expected Turnout: {(data['potential_turnout']/total_potential_voters)*100:.1f}%")
    
    def create_turnout_visualizations(self, demographic_voters):
        """Create visualizations of turnout analysis"""
        plt.figure(figsize=(15, 6))
        
        # Turnout comparison
        plt.subplot(1, 2, 1)
        groups = list(demographic_voters.keys())
        eligible = [data['eligible'] for data in demographic_voters.values()]
        turnout = [data['potential_turnout'] for data in demographic_voters.values()]
        
        x = np.arange(len(groups))
        width = 0.35
        
        plt.bar(x - width/2, eligible, width, label='Eligible Voters')
        plt.bar(x + width/2, turnout, width, label='Expected Turnout')
        
        plt.xlabel('Demographic Group')
        plt.ylabel('Number of Voters')
        plt.title('Eligible vs Expected Turnout by Demographic')
        plt.xticks(x, groups)
        plt.legend()
        
        # Turnout rates
        plt.subplot(1, 2, 2)
        rates = [data['turnout_rate']*100 for data in demographic_voters.values()]
        plt.bar(groups, rates)
        plt.ylabel('Turnout Rate (%)')
        plt.title('Historical Turnout Rates by Demographic')
        plt.xticks(rotation=45)
        
        for i, v in enumerate(rates):
            plt.text(i, v + 1, f'{v:.1f}%', ha='center')
        
        plt.tight_layout()
        plt.savefig(self.analysis_dir / 'CA13_turnout_analysis.png')
        print(f"\nSaved turnout visualizations to: {self.analysis_dir / 'CA13_turnout_analysis.png'}")
        plt.show()
    
    def save_turnout_analysis(self, demographic_voters, total_potential_voters):
        """Save detailed turnout analysis to file"""
        analysis_path = self.analysis_dir / 'CA13_turnout_analysis.txt'
        
        with open(analysis_path, 'w') as f:
            f.write("CA-13 Congressional District Turnout Analysis\n")
            f.write("=" * 50 + "\n\n")
            
            f.write(f"Total CVAP: {self.total_cvap:,.0f}\n")
            f.write(f"Estimated Total Turnout: {total_potential_voters:,.0f}\n")
            f.write(f"Estimated Turnout Rate: {(total_potential_voters/self.total_cvap)*100:.1f}%\n\n")
            
            f.write("Demographic Breakdown:\n")
            f.write("-" * 20 + "\n")
            for group, data in demographic_voters.items():
                f.write(f"\n{group}:\n")
                f.write(f"  Eligible Voters: {data['eligible']:,.0f}\n")
                f.write(f"  Expected Turnout: {data['potential_turnout']:,.0f}\n")
                f.write(f"  Historical Turnout Rate: {data['turnout_rate']*100:.1f}%\n")
                f.write(f"  % of Total Expected Turnout: {(data['potential_turnout']/total_potential_voters)*100:.1f}%\n")
        
        print(f"\nSaved detailed turnout analysis to: {analysis_path}")

if __name__ == "__main__":
    analyzer = CA13ElectionAnalyzer()
    analyzer.analyze_voter_potential()



================================================================================
File: src/election-data-collector.py
================================================================================

import pandas as pd
import requests
from pathlib import Path
import json
import time

class ElectionDataCollector:
    def __init__(self):
        self.data_dir = Path('data')
        self.election_dir = self.data_dir / 'election_data'
        self.election_dir.mkdir(exist_ok=True)
        self.results = {}
        
    def create_election_template(self):
        """Create a template for manual data entry"""
        template = {
            'general_elections': {
                '2022': {
                    'date': 'November 8, 2022',
                    'total_votes': None,
                    'candidates': {
                        'democratic': {
                            'name': 'John Duarte',
                            'party': 'Democratic',
                            'votes': None,
                            'percentage': None
                        },
                        'republican': {
                            'name': 'Adam Gray',
                            'party': 'Republican',
                            'votes': None,
                            'percentage': None
                        }
                    },
                    'turnout': None
                },
                '2020': {
                    'date': 'November 3, 2020',
                    'total_votes': None,
                    'candidates': {
                        'democratic': {
                            'name': 'Barbara Lee',  # Previous district
                            'party': 'Democratic',
                            'votes': None,
                            'percentage': None
                        },
                        'republican': {
                            'name': 'Nikka Piterman',
                            'party': 'Republican',
                            'votes': None,
                            'percentage': None
                        }
                    },
                    'turnout': None
                }
            }
        }
        
        # Save template
        template_path = self.election_dir / 'election_data_template.json'
        with open(template_path, 'w') as f:
            json.dump(template, f, indent=4)
            
        # Create CSV template for precinct-level data
        precinct_template = pd.DataFrame(columns=[
            'year', 'precinct_id', 'precinct_name', 'total_votes',
            'democratic_votes', 'republican_votes', 'other_votes',
            'registered_voters', 'turnout'
        ])
        
        precinct_template.to_csv(self.election_dir / 'precinct_data_template.csv', index=False)
        
        print("Created data templates:")
        print(f"1. Election data template: {template_path}")
        print(f"2. Precinct data template: {self.election_dir / 'precinct_data_template.csv'}")
        print("\nPlease fill in the templates with data from:")
        print("- CA Secretary of State: https://www.sos.ca.gov/elections/prior-elections")
        print("- County Election Offices:")
        print("  * Fresno County: https://www.co.fresno.ca.us/departments/county-clerk-registrar-of-voters/election-information/election-results")
        print("  * Madera County: https://votemadera.com/election-results/")
        print("  * Merced County: https://www.co.merced.ca.us/221/Elections")
        print("  * San Joaquin County: https://www.sjgov.org/department/rov/election-information/past-elections")
        print("  * Stanislaus County: https://www.stanvote.com/past-elections.shtm")
        
        self.create_data_collection_guide()
    
    def create_data_collection_guide(self):
        """Create a guide for collecting election data"""
        guide_path = self.election_dir / 'data_collection_guide.txt'
        
        with open(guide_path, 'w') as f:
            f.write("CA-13 Election Data Collection Guide\n")
            f.write("=" * 50 + "\n\n")
            
            f.write("1. District Information:\n")
            f.write("   - Current CA-13 (2022-Present):\n")
            f.write("     * Parts of Fresno, Madera, Merced, San Joaquin, and Stanislaus counties\n")
            f.write("   - Previous CA-13 (Pre-2022):\n")
            f.write("     * Different boundaries (Oakland area)\n\n")
            
            f.write("2. Data Sources:\n")
            f.write("   a) State Level:\n")
            f.write("      - CA Secretary of State website\n")
            f.write("      - Statement of Vote archives\n\n")
            
            f.write("   b) County Level:\n")
            f.write("      - Each county's election office website\n")
            f.write("      - Contact county registrars for detailed precinct data\n\n")
            
            f.write("3. Data to Collect:\n")
            f.write("   - Total votes cast\n")
            f.write("   - Votes by candidate\n")
            f.write("   - Voter turnout\n")
            f.write("   - Precinct-level results where available\n")
            f.write("   - Registration statistics\n\n")
            
            f.write("4. Important Notes:\n")
            f.write("   - Document data sources\n")
            f.write("   - Note any discrepancies\n")
            f.write("   - Record collection date\n")
            f.write("   - Note any boundary changes\n")
        
        print(f"\nCreated data collection guide: {guide_path}")

if __name__ == "__main__":
    collector = ElectionDataCollector()
    collector.create_election_template()



================================================================================
File: src/spatial_analysis/ca13-gis-maps.py
================================================================================

import geopandas as gpd
import matplotlib.pyplot as plt
import contextily as ctx
from pathlib import Path

class CA13GISMapper:
    def __init__(self):
        self.data_dir = Path('data/spatial/raw')
        self.output_dir = Path('data/visualizations/gis_maps')
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
    def map_california_districts(self):
        """Map 1: All Congressional Districts in California"""
        print("\nCreating California Congressional Districts map...")
        
        # Load district data
        districts = gpd.read_file(self.data_dir / 'ca_congressional_districts' / 'US_Congressional_Districts.shp')
        
        # Convert to Web Mercator projection for basemap
        districts = districts.to_crs(epsg=3857)
        
        fig, ax = plt.subplots(figsize=(15, 20))
        
        # Plot districts with different colors and labels
        districts.plot(ax=ax, 
                      column='CongDist_1',
                      categorical=True,
                      legend=True,
                      legend_kwds={'bbox_to_anchor': (1.3, 1)},
                      alpha=0.6)
        
        # Highlight CA-13
        ca13 = districts[districts['CongDist_1'] == 'CD 13']
        ca13.plot(ax=ax, color='red', alpha=0.4, label='CD 13')
        
        # Add OpenStreetMap basemap
        ctx.add_basemap(ax, source=ctx.providers.OpenStreetMap.Mapnik)
        
        # Add title and legend
        plt.title('California Congressional Districts\nDistrict 13 Highlighted', pad=20)
        
        # Add district labels
        for idx, row in districts.iterrows():
            centroid = row.geometry.centroid
            plt.annotate(row['CongDist_1'], 
                        xy=(centroid.x, centroid.y),
                        ha='center', fontsize=8)
        
        plt.axis('off')
        plt.savefig(self.output_dir / 'california_districts.png', 
                   bbox_inches='tight', dpi=300)
        plt.close()
        
        return districts, ca13  # Return for use in other methods
    
    def map_district_13(self, districts=None, ca13=None):
        """Map 2: Detailed map of CA-13"""
        print("\nCreating detailed CA-13 map...")
        
        if districts is None or ca13 is None:
            # Load district data if not provided
            districts = gpd.read_file(self.data_dir / 'ca_congressional_districts' / 'US_Congressional_Districts.shp')
            districts = districts.to_crs(epsg=3857)
            ca13 = districts[districts['CongDist_1'] == 'CD 13']
        
        # Get CA-13 bounds
        ca13_bounds = ca13.geometry.bounds.iloc[0]
        
        fig, ax = plt.subplots(figsize=(15, 15))
        
        # Plot CA-13 with context
        districts.plot(ax=ax, color='lightgrey', alpha=0.3)
        ca13.plot(ax=ax, color='red', alpha=0.6)
        
        # Add OpenStreetMap basemap
        ctx.add_basemap(ax, source=ctx.providers.OpenStreetMap.Mapnik)
        
        plt.title('California Congressional District 13', pad=20)
        
        # Zoom to CA-13 with buffer
        ax.set_xlim(ca13_bounds.minx - 50000, ca13_bounds.maxx + 50000)
        ax.set_ylim(ca13_bounds.miny - 50000, ca13_bounds.maxy + 50000)
        
        plt.axis('off')
        plt.savefig(self.output_dir / 'district_13.png', 
                   bbox_inches='tight', dpi=300)
        plt.close()
        
        return ca13  # Return for use in other methods
    
    def map_precincts(self, ca13=None):
        """Map 3: Precincts within CA-13"""
        print("\nCreating precinct map...")
        
        # Load precinct data
        precincts = gpd.read_file(self.data_dir / 'ca_vest_20' / 'ca_vest_20.shp')
        precincts = precincts.to_crs(epsg=3857)
        
        # Filter for CA-13 precincts
        ca13_precincts = precincts[precincts['CDDIST'] == 13]
        
        fig, ax = plt.subplots(figsize=(15, 15))
        
        # Plot precincts with 2020 election results
        ca13_precincts['dem_share'] = (
            ca13_precincts['G20PREDBID'] / 
            (ca13_precincts['G20PREDBID'] + ca13_precincts['G20PRERTRU']) * 100
        )
        
        ca13_precincts.plot(ax=ax,
                           column='dem_share',
                           legend=True,
                           legend_kwds={'label': 'Democratic Vote Share (%)',
                                      'orientation': 'vertical'},
                           cmap='RdBu',
                           vmin=0,
                           vmax=100)
        
        # Add OpenStreetMap basemap
        ctx.add_basemap(ax, source=ctx.providers.OpenStreetMap.Mapnik)
        
        plt.title('CA-13 Precincts\n2020 Presidential Election Results', pad=20)
        plt.axis('off')
        plt.savefig(self.output_dir / 'ca13_precincts.png', 
                   bbox_inches='tight', dpi=300)
        plt.close()
    
    def map_demographic_feature(self, ca13=None):
        """Map 4: Census tract feature within CA-13"""
        print("\nCreating demographic feature map...")
        
        if ca13 is None:
            # Load district data if not provided
            districts = gpd.read_file(self.data_dir / 'ca_congressional_districts' / 'US_Congressional_Districts.shp')
            districts = districts.to_crs(epsg=3857)
            ca13 = districts[districts['CongDist_1'] == 'CD 13']
        
        # Load census tract data
        tracts = gpd.read_file(self.data_dir / 'tl_2022_06_tract' / 'tl_2022_06_tract.shp')
        tracts = tracts.to_crs(epsg=3857)
        
        # Clip tracts to CA-13 boundary
        ca13_tracts = gpd.overlay(tracts, ca13, how='intersection')
        
        fig, ax = plt.subplots(figsize=(15, 15))
        
        # Plot census tracts with a choropleth based on land area
        ca13_tracts.plot(ax=ax,
                        column='ALAND',
                        legend=True,
                        legend_kwds={'label': 'Land Area (sq meters)'},
                        cmap='YlOrRd')
        
        # Add OpenStreetMap basemap
        ctx.add_basemap(ax, source=ctx.providers.OpenStreetMap.Mapnik)
        
        plt.title('CA-13 Census Tracts\nLand Area Distribution', pad=20)
        plt.axis('off')
        plt.savefig(self.output_dir / 'ca13_demographic_feature.png', 
                   bbox_inches='tight', dpi=300)
        plt.close()

if __name__ == "__main__":
    print("Creating GIS Maps for CA-13")
    print("=" * 50)
    
    # First, make sure we have all required packages
    try:
        import contextily as ctx
        print("✓ Successfully imported contextily")
    except ImportError:
        print("Installing required packages...")
        import subprocess
        subprocess.check_call(["pip", "install", "contextily"])
        import contextily as ctx
    
    mapper = CA13GISMapper()
    
    # Create maps in sequence, passing data between methods
    districts, ca13 = mapper.map_california_districts()
    mapper.map_district_13(districts, ca13)
    mapper.map_precincts()
    mapper.map_demographic_feature(ca13)
    
    print("\nAll maps have been created!")
    print(f"\nMaps are saved in: {mapper.output_dir}")


================================================================================
File: src/spatial_analysis/ca13-detailed-maps.py
================================================================================

import geopandas as gpd
import matplotlib.pyplot as plt
import contextily as ctx
import numpy as np
from pathlib import Path

class CA13DetailedMapper:
    def __init__(self):
        self.data_dir = Path('data/spatial/raw')
        self.output_dir = Path('data/visualizations/detailed_maps')
        self.output_dir.mkdir(parents=True, exist_ok=True)
    
    def create_voting_pattern_maps(self):
        """Create detailed maps showing voting patterns"""
        print("\nCreating detailed voting pattern maps...")
        
        # Load data
        precincts = gpd.read_file(self.data_dir / 'ca_vest_20' / 'ca_vest_20.shp')
        ca13_precincts = precincts[precincts['CDDIST'] == 13].copy()
        
        # Calculate metrics
        ca13_precincts['total_votes'] = ca13_precincts['G20PREDBID'] + ca13_precincts['G20PRERTRU']
        ca13_precincts['dem_share'] = (ca13_precincts['G20PREDBID'] / ca13_precincts['total_votes'] * 100)
        ca13_precincts['turnout_density'] = ca13_precincts['total_votes'] / ca13_precincts.geometry.area
        
        # Convert to Web Mercator for basemap
        ca13_precincts = ca13_precincts.to_crs(epsg=3857)
        
        # Create multi-panel visualization
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(20, 20))
        
        # 1. Democratic Vote Share
        self.plot_dem_share(ca13_precincts, ax1)
        
        # 2. Voter Turnout Density
        self.plot_turnout_density(ca13_precincts, ax2)
        
        # 3. Precinct Size Analysis
        self.plot_precinct_sizes(ca13_precincts, ax3)
        
        # 4. Vote Distribution
        self.plot_vote_distribution(ca13_precincts, ax4)
        
        plt.tight_layout()
        plt.savefig(self.output_dir / 'ca13_detailed_patterns.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        # Create detailed statistics report
        self.create_statistics_report(ca13_precincts)
    
    def plot_dem_share(self, data, ax):
        """Plot Democratic vote share with custom color scheme"""
        data.plot(column='dem_share',
                 ax=ax,
                 legend=True,
                 legend_kwds={'label': 'Democratic Vote Share (%)'},
                 cmap='RdBu_r',
                 vmin=0,
                 vmax=100)
        
        ctx.add_basemap(ax, source=ctx.providers.OpenStreetMap.Mapnik)
        ax.set_title('Democratic Vote Share by Precinct')
        ax.axis('off')
    
    def plot_turnout_density(self, data, ax):
        """Plot voter turnout density"""
        data.plot(column='turnout_density',
                 ax=ax,
                 legend=True,
                 legend_kwds={'label': 'Votes per Square Kilometer'},
                 cmap='viridis')
        
        ctx.add_basemap(ax, source=ctx.providers.OpenStreetMap.Mapnik)
        ax.set_title('Voter Turnout Density')
        ax.axis('off')
    
    def plot_precinct_sizes(self, data, ax):
        """Plot precinct sizes"""
        data['area_km2'] = data.geometry.area / 1e6
        data.plot(column='area_km2',
                 ax=ax,
                 legend=True,
                 legend_kwds={'label': 'Precinct Area (km²)'},
                 cmap='YlOrRd')
        
        ctx.add_basemap(ax, source=ctx.providers.OpenStreetMap.Mapnik)
        ax.set_title('Precinct Sizes')
        ax.axis('off')
    
    def plot_vote_distribution(self, data, ax):
        """Plot absolute vote distribution"""
        data.plot(column='total_votes',
                 ax=ax,
                 legend=True,
                 legend_kwds={'label': 'Total Votes Cast'},
                 cmap='Purples')
        
        ctx.add_basemap(ax, source=ctx.providers.OpenStreetMap.Mapnik)
        ax.set_title('Total Votes by Precinct')
        ax.axis('off')
    
    def create_statistics_report(self, data):
        """Create detailed statistics report"""
        stats_file = self.output_dir / 'precinct_statistics.md'
        
        with open(stats_file, 'w') as f:
            f.write("# CA-13 Precinct-Level Statistics\n\n")
            
            f.write("## Voting Patterns\n")
            f.write(f"- Total Precincts: {len(data)}\n")
            f.write(f"- Average Democratic Vote Share: {data['dem_share'].mean():.1f}%\n")
            f.write(f"- Median Democratic Vote Share: {data['dem_share'].median():.1f}%\n")
            f.write(f"- Standard Deviation: {data['dem_share'].std():.1f}%\n\n")
            
            f.write("## Geographic Distribution\n")
            f.write(f"- Average Precinct Size: {(data.geometry.area / 1e6).mean():.2f} km²\n")
            f.write(f"- Largest Precinct: {(data.geometry.area / 1e6).max():.2f} km²\n")
            f.write(f"- Smallest Precinct: {(data.geometry.area / 1e6).min():.2f} km²\n\n")
            
            f.write("## Voter Turnout\n")
            f.write(f"- Total Votes Cast: {data['total_votes'].sum():,.0f}\n")
            f.write(f"- Average Votes per Precinct: {data['total_votes'].mean():.0f}\n")
            f.write(f"- Highest Turnout Precinct: {data['total_votes'].max():.0f}\n")
            f.write(f"- Lowest Turnout Precinct: {data['total_votes'].min():.0f}\n\n")
            
            f.write("## Key Observations\n")
            f.write("1. Strong Democratic performance across most precincts\n")
            f.write("2. Significant variation in precinct sizes\n")
            f.write("3. Turnout density correlates with urban areas\n")
            f.write("4. Geographic patterns suggest urban-rural divide\n")
        
        print(f"Detailed statistics saved to: {stats_file}")

if __name__ == "__main__":
    print("Creating Detailed Electoral Geography Maps for CA-13")
    print("=" * 50)
    
    mapper = CA13DetailedMapper()
    mapper.create_voting_pattern_maps()



================================================================================
File: src/spatial_analysis/detailed-spatial-analysis.py
================================================================================

import geopandas as gpd
import pandas as pd
import numpy as np
from pathlib import Path

class DetailedSpatialAnalyzer:
    def __init__(self):
        self.data_dir = Path('data/spatial/raw')
        self.report_dir = Path('data/analysis/spatial')
        self.report_dir.mkdir(parents=True, exist_ok=True)
    
    def analyze_district_characteristics(self):
        """Analyze detailed characteristics of CA-13"""
        print("\nAnalyzing CA-13 Geographic Characteristics...")
        
        # Load district data
        districts = gpd.read_file(self.data_dir / 'ca_congressional_districts' / 'US_Congressional_Districts.shp')
        ca13 = districts[districts['CongDist_1'] == 'CD 13']
        
        # Load precinct data
        precincts = gpd.read_file(self.data_dir / 'ca_vest_20' / 'ca_vest_20.shp')
        ca13_precincts = precincts[precincts['CDDIST'] == 13]
        
        # Analyze precinct-level election results
        ca13_precincts['total_votes'] = ca13_precincts['G20PREDBID'] + ca13_precincts['G20PRERTRU']
        ca13_precincts['dem_share'] = (ca13_precincts['G20PREDBID'] / ca13_precincts['total_votes'] * 100)
        
        # Generate detailed report
        with open(self.report_dir / 'detailed_spatial_analysis.md', 'w') as f:
            f.write("# CA-13 Detailed Spatial Analysis\n\n")
            
            # 1. District Overview
            f.write("## 1. District Geographic Overview\n\n")
            f.write("### Location and Boundaries\n")
            f.write("- Located in Central California\n")
            f.write("- Part of California's Central Valley region\n")
            f.write(f"- Total area: {ca13.geometry.area.iloc[0]/1e6:.2f} square kilometers\n\n")
            
            # 2. Precinct Analysis
            f.write("## 2. Precinct-Level Analysis\n\n")
            f.write("### Precinct Statistics\n")
            f.write(f"- Total number of precincts: {len(ca13_precincts)}\n")
            f.write(f"- Average precinct size: {ca13_precincts.geometry.area.mean()/1e6:.2f} square kilometers\n")
            
            # Voting patterns
            f.write("\n### Voting Patterns\n")
            dem_precincts = len(ca13_precincts[ca13_precincts['dem_share'] > 50])
            rep_precincts = len(ca13_precincts[ca13_precincts['dem_share'] <= 50])
            f.write(f"- Democratic-leaning precincts: {dem_precincts}\n")
            f.write(f"- Republican-leaning precincts: {rep_precincts}\n")
            f.write(f"- Average Democratic vote share: {ca13_precincts['dem_share'].mean():.1f}%\n\n")
            
            # 3. Geographic Features
            f.write("## 3. Geographic Features\n\n")
            f.write("### Natural Features\n")
            f.write("- Situated in California's Central Valley\n")
            f.write("- Agricultural land use prominent in district\n")
            f.write("- Mix of urban and rural areas\n\n")
            
            # 4. Spatial Patterns
            f.write("## 4. Spatial Patterns\n\n")
            f.write("### Population Distribution\n")
            f.write("- Varying population densities across precincts\n")
            f.write("- Urban clusters identified through precinct sizes\n")
            f.write("- Rural areas with larger precinct geometries\n\n")
            
            # 5. Electoral Geography
            f.write("## 5. Electoral Geography\n\n")
            f.write("### Voting Pattern Distribution\n")
            f.write(f"- District-wide Democratic vote share: {ca13_precincts['dem_share'].mean():.1f}%\n")
            f.write(f"- Highest Democratic precinct share: {ca13_precincts['dem_share'].max():.1f}%\n")
            f.write(f"- Lowest Democratic precinct share: {ca13_precincts['dem_share'].min():.1f}%\n\n")
            
            # 6. Key Observations
            f.write("## 6. Key Observations\n\n")
            f.write("### Geographic Patterns\n")
            f.write("1. The district shows clear urban-rural divisions\n")
            f.write("2. Precinct sizes correlate with population density\n")
            f.write("3. Voting patterns show geographic clustering\n")
            f.write("4. Natural features influence district boundaries\n\n")
            
            # 7. Implications
            f.write("## 7. Implications for Representation\n\n")
            f.write("### District Characteristics\n")
            f.write("1. Mixed urban-rural composition affects representation needs\n")
            f.write("2. Geographic diversity requires balanced policy approach\n")
            f.write("3. Population distribution influences campaign strategies\n")
            f.write("4. Precinct-level patterns suggest localized community interests\n")
        
        print(f"Detailed analysis saved to: {self.report_dir / 'detailed_spatial_analysis.md'}")
        
        # Print summary statistics
        print("\nKey District Statistics:")
        print("-" * 50)
        print(f"Total Precincts: {len(ca13_precincts)}")
        print(f"Democratic-leaning Precincts: {dem_precincts} ({dem_precincts/len(ca13_precincts)*100:.1f}%)")
        print(f"Republican-leaning Precincts: {rep_precincts} ({rep_precincts/len(ca13_precincts)*100:.1f}%)")
        print(f"Average Democratic Vote Share: {ca13_precincts['dem_share'].mean():.1f}%")
        print(f"District Area: {ca13.geometry.area.iloc[0]/1e6:.2f} square kilometers")

if __name__ == "__main__":
    print("Generating Detailed Spatial Analysis for CA-13")
    print("=" * 50)
    
    analyzer = DetailedSpatialAnalyzer()
    analyzer.analyze_district_characteristics()



================================================================================
File: src/spatial_analysis/gis-map-analysis.py
================================================================================

import geopandas as gpd
import pandas as pd
from pathlib import Path
import json

class MapAnalyzer:
    def __init__(self):
        self.data_dir = Path('data/spatial/raw')
        self.map_dir = Path('data/visualizations/gis_maps')
        self.report_dir = Path('data/analysis/spatial')
        self.report_dir.mkdir(parents=True, exist_ok=True)
    
    def analyze_maps(self):
        """Analyze all created maps and generate report"""
        report = {
            "title": "CA-13 Spatial Analysis Report",
            "date": pd.Timestamp.now().strftime("%Y-%m-%d"),
            "map_analysis": {}
        }
        
        # 1. State Districts Analysis
        print("\nAnalyzing California Congressional Districts map...")
        districts = gpd.read_file(self.data_dir / 'ca_congressional_districts' / 'US_Congressional_Districts.shp')
        
        state_analysis = {
            "total_districts": len(districts),
            "ca13_location": "Central California",
            "neighboring_districts": self.get_neighboring_districts(districts),
            "key_features": [
                "Shows CA-13's position within California's congressional district system",
                "Highlights relative size and location of CA-13",
                "Demonstrates relationship with neighboring districts"
            ]
        }
        report["map_analysis"]["state_districts"] = state_analysis
        
        # 2. District 13 Analysis
        print("\nAnalyzing CA-13 detailed map...")
        ca13_analysis = {
            "district_characteristics": [
                "Covers portions of Central Valley",
                "Includes both urban and rural areas",
                "Significant agricultural presence",
                "Major transportation corridors"
            ],
            "geographic_features": [
                "Varied terrain",
                "Important waterways",
                "Agricultural lands",
                "Urban centers"
            ]
        }
        report["map_analysis"]["district_13"] = ca13_analysis
        
        # 3. Precinct Analysis
        print("\nAnalyzing precinct map...")
        precincts = gpd.read_file(self.data_dir / 'ca_vest_20' / 'ca_vest_20.shp')
        ca13_precincts = precincts[precincts['CDDIST'] == 13]
        
        precinct_analysis = {
            "total_precincts": len(ca13_precincts),
            "voting_patterns": self.analyze_voting_patterns(ca13_precincts),
            "key_observations": [
                "Varying precinct sizes indicating population density differences",
                "Geographic distribution of political preferences",
                "Urban-rural voting pattern distinctions",
                "Relationship between precinct size and voter turnout"
            ]
        }
        report["map_analysis"]["precincts"] = precinct_analysis
        
        # 4. Demographic Feature Analysis
        print("\nAnalyzing demographic feature map...")
        tracts = gpd.read_file(self.data_dir / 'tl_2022_06_tract' / 'tl_2022_06_tract.shp')
        
        demographic_analysis = {
            "tract_count": len(tracts),
            "land_use_patterns": [
                "Variation in population density",
                "Urban-rural gradient",
                "Geographic distribution of communities",
                "Infrastructure and development patterns"
            ],
            "implications": [
                "Population distribution effects on representation",
                "Geographic factors influencing voter access",
                "Community clustering patterns",
                "Potential impact on electoral outcomes"
            ]
        }
        report["map_analysis"]["demographics"] = demographic_analysis
        
        # Save report
        self.save_report(report)
        self.print_summary(report)
    
    def get_neighboring_districts(self, districts):
        """Identify neighboring districts of CA-13"""
        ca13 = districts[districts['CongDist_1'] == 'CD 13']
        neighbors = []
        
        for idx, district in districts.iterrows():
            if district['CongDist_1'] != 'CD 13':
                if ca13.geometry.iloc[0].touches(district.geometry):
                    neighbors.append(district['CongDist_1'])
        
        return neighbors
    
    def analyze_voting_patterns(self, precincts):
        """Analyze voting patterns in precincts"""
        precincts['dem_share'] = (
            precincts['G20PREDBID'] / 
            (precincts['G20PREDBID'] + precincts['G20PRERTRU']) * 100
        )
        
        return {
            "democratic_precincts": len(precincts[precincts['dem_share'] > 50]),
            "republican_precincts": len(precincts[precincts['dem_share'] <= 50]),
            "avg_dem_share": precincts['dem_share'].mean(),
            "patterns": [
                "Geographic clustering of political preferences",
                "Urban-rural divide in voting patterns",
                "Relationship between precinct size and partisan lean"
            ]
        }
    
    def save_report(self, report):
        """Save analysis report to file"""
        output_file = self.report_dir / 'spatial_analysis_report.json'
        with open(output_file, 'w') as f:
            json.dump(report, f, indent=2)
        print(f"\nSaved detailed report to: {output_file}")
        
        # Save markdown version for easy reading
        md_file = self.report_dir / 'spatial_analysis_report.md'
        with open(md_file, 'w') as f:
            f.write(f"# {report['title']}\n")
            f.write(f"Date: {report['date']}\n\n")
            
            for map_type, analysis in report['map_analysis'].items():
                f.write(f"## {map_type.replace('_', ' ').title()}\n")
                for key, value in analysis.items():
                    f.write(f"\n### {key.replace('_', ' ').title()}\n")
                    if isinstance(value, list):
                        for item in value:
                            f.write(f"- {item}\n")
                    else:
                        f.write(f"{value}\n")
                f.write("\n")
        
        print(f"Saved readable report to: {md_file}")
    
    def print_summary(self, report):
        """Print summary of findings"""
        print("\nKey Findings from Spatial Analysis:")
        print("=" * 50)
        
        for map_type, analysis in report['map_analysis'].items():
            print(f"\n{map_type.replace('_', ' ').title()}:")
            print("-" * 30)
            
            if "key_features" in analysis:
                for feature in analysis["key_features"][:2]:
                    print(f"- {feature}")
            if "key_observations" in analysis:
                for obs in analysis["key_observations"][:2]:
                    print(f"- {obs}")
            if "implications" in analysis:
                for imp in analysis["implications"][:2]:
                    print(f"- {imp}")

if __name__ == "__main__":
    print("Analyzing CA-13 GIS Maps")
    print("=" * 50)
    
    analyzer = MapAnalyzer()
    analyzer.analyze_maps()



================================================================================
File: src/spatial_analysis/ca13-spatial-analyzer.py
================================================================================

import geopandas as gpd
import matplotlib.pyplot as plt
import contextily as ctx
import pandas as pd
import numpy as np
from pathlib import Path

class CA13SpatialAnalyzer:
    def __init__(self):
        self.data_dir = Path('data/spatial')
        self.raw_dir = self.data_dir / 'raw'
        self.visualization_dir = Path('data/visualizations/spatial')
        self.visualization_dir.mkdir(parents=True, exist_ok=True)
        
        # File paths
        self.district_file = self.raw_dir / 'ca_congressional_districts' / 'US_Congressional_Districts.shp'
        self.precinct_file = self.raw_dir / 'ca_vest_20' / 'ca_vest_20.shp'
        self.tract_file = self.raw_dir / 'tl_2022_06_tract' / 'tl_2022_06_tract.shp'
    
    def load_all_data(self):
        """Load all spatial datasets"""
        print("Loading spatial datasets...")
        
        try:
            # Load Congressional Districts
            self.districts = gpd.read_file(self.district_file)
            print("✓ Loaded congressional districts")
            
            # Load VEST Precinct Data
            self.precincts = gpd.read_file(self.precinct_file)
            print("✓ Loaded precinct data")
            
            # Load Census Tracts
            self.tracts = gpd.read_file(self.tract_file)
            print("✓ Loaded census tracts")
            
            return True
            
        except Exception as e:
            print(f"Error loading data: {e}")
            return False
    
    def create_district_map(self):
        """Create map of CA-13 within California"""
        print("\nCreating district map...")
        
        try:
            fig, ax = plt.subplots(figsize=(15, 15))
            
            # Plot all districts
            self.districts.plot(ax=ax, color='lightgray', edgecolor='black')
            
            # Highlight CA-13
            ca13 = self.districts[self.districts['CongDist_1'] == 'CD 13']
            ca13.plot(ax=ax, color='red', alpha=0.5)
            
            # Add labels for neighboring districts
            for idx, row in self.districts.iterrows():
                centroid = row.geometry.centroid
                ax.annotate(row['CongDist_1'], 
                          xy=(centroid.x, centroid.y),
                          ha='center', va='center',
                          fontsize=8)
            
            plt.title('California Congressional District 13 and Surroundings')
            plt.axis('equal')
            
            plt.savefig(self.visualization_dir / 'ca13_district_map.png')
            print(f"Saved district map to: {self.visualization_dir / 'ca13_district_map.png'}")
            plt.close()
            
        except Exception as e:
            print(f"Error creating district map: {e}")
    
    def create_precinct_map(self):
        """Create detailed precinct map of CA-13"""
        print("\nCreating precinct map...")
        
        try:
            # Filter precincts for CA-13
            ca13_precincts = self.precincts[self.precincts['CDDIST'] == 13]
            
            # Create multi-panel visualization
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(20, 20))
            
            # 1. Democratic Vote Share
            ca13_precincts['dem_share'] = (
                ca13_precincts['G20PREDBID'] / 
                (ca13_precincts['G20PREDBID'] + ca13_precincts['G20PRERTRU']) * 100
            )
            ca13_precincts.plot(column='dem_share',
                              ax=ax1,
                              legend=True,
                              legend_kwds={'label': 'Democratic Vote Share (%)'},
                              cmap='RdBu_r',
                              vmin=0,
                              vmax=100)
            ax1.set_title('Democratic Vote Share')
            
            # 2. Total Votes
            ca13_precincts['total_votes'] = ca13_precincts['G20PREDBID'] + ca13_precincts['G20PRERTRU']
            ca13_precincts.plot(column='total_votes',
                              ax=ax2,
                              legend=True,
                              legend_kwds={'label': 'Total Votes'},
                              cmap='viridis')
            ax2.set_title('Total Votes by Precinct')
            
            # 3. Margin of Victory
            ca13_precincts['margin'] = (
                (ca13_precincts['G20PREDBID'] - ca13_precincts['G20PRERTRU']) /
                ca13_precincts['total_votes'] * 100
            )
            ca13_precincts.plot(column='margin',
                              ax=ax3,
                              legend=True,
                              legend_kwds={'label': 'Margin (%)'},
                              cmap='RdBu')
            ax3.set_title('Margin of Victory (+ Dem, - Rep)')
            
            # 4. Precinct Boundaries
            ca13_precincts.plot(ax=ax4, edgecolor='black', facecolor='none')
            ax4.set_title('Precinct Boundaries')
            
            # Adjust layout
            plt.tight_layout()
            plt.savefig(self.visualization_dir / 'ca13_precinct_analysis.png')
            print(f"Saved precinct analysis to: {self.visualization_dir / 'ca13_precinct_analysis.png'}")
            plt.close()
            
            # Save summary statistics
            self.print_election_statistics(ca13_precincts)
            
        except Exception as e:
            print(f"Error creating precinct map: {e}")
            print(f"Detailed error: {str(e)}")
    
    def print_election_statistics(self, ca13_precincts):
        """Print detailed election statistics"""
        print("\nCA-13 Election Statistics:")
        print("-" * 50)
        
        total_biden = ca13_precincts['G20PREDBID'].sum()
        total_trump = ca13_precincts['G20PRERTRU'].sum()
        total_votes = total_biden + total_trump
        
        print(f"Total Votes Cast: {total_votes:,.0f}")
        print(f"Biden Votes: {total_biden:,.0f} ({total_biden/total_votes*100:.1f}%)")
        print(f"Trump Votes: {total_trump:,.0f} ({total_trump/total_votes*100:.1f}%)")
        
        dem_precincts = len(ca13_precincts[ca13_precincts['G20PREDBID'] > ca13_precincts['G20PRERTRU']])
        rep_precincts = len(ca13_precincts[ca13_precincts['G20PREDBID'] < ca13_precincts['G20PRERTRU']])
        
        print(f"\nPrecincts won by Democrats: {dem_precincts}")
        print(f"Precincts won by Republicans: {rep_precincts}")
        
        # Calculate margin statistics
        margins = ca13_precincts['margin']
        print(f"\nMargin Statistics:")
        print(f"Average Margin: {margins.mean():.1f}%")
        print(f"Median Margin: {margins.median():.1f}%")
        print(f"Maximum Democratic Margin: {margins.max():.1f}%")
        print(f"Maximum Republican Margin: {margins.min():.1f}%")

if __name__ == "__main__":
    print("CA-13 Spatial Analysis")
    print("=" * 50)
    
    analyzer = CA13SpatialAnalyzer()
    
    if analyzer.load_all_data():
        analyzer.create_district_map()
        analyzer.create_precinct_map()
    else:
        print("\nError loading data. Please check file paths and data integrity.")


================================================================================
File: src/financial/fec-data-fetcher.py
================================================================================

import requests
import json
from pathlib import Path
import pandas as pd
from datetime import datetime

class FECDataFetcher:
    def __init__(self, api_key):
        self.api_key = api_key
        self.base_url = "https://api.open.fec.gov/v1"
        self.data_dir = Path('data/campaign_finance')
        self.data_dir.mkdir(parents=True, exist_ok=True)
        
    def test_api_connection(self):
        """Test the API connection and key validity"""
        try:
            test_url = f"{self.base_url}/candidates"
            params = {
                'api_key': self.api_key,
                'per_page': 1
            }
            
            print("Testing API connection...")
            response = requests.get(test_url, params=params)
            
            if response.status_code == 200:
                print("✓ API connection successful!")
                return True
            else:
                print(f"✗ API connection failed: {response.status_code}")
                print(f"Error: {response.text}")
                return False
                
        except Exception as e:
            print(f"✗ Error testing API connection: {str(e)}")
            return False
    
    def fetch_ca13_candidates(self):
        """Fetch current CA-13 candidates"""
        try:
            params = {
                'api_key': self.api_key,
                'state': 'CA',
                'district': '13',
                'election_year': 2024,
                'per_page': 100
            }
            
            print("\nFetching CA-13 candidates...")
            response = requests.get(f"{self.base_url}/candidates/search", params=params)
            
            if response.status_code == 200:
                data = response.json()
                
                # Save raw candidate data
                with open(self.data_dir / 'ca13_candidates_raw.json', 'w') as f:
                    json.dump(data, f, indent=2)
                
                # Print candidate summary
                print("\nFound Candidates:")
                print("-" * 50)
                for candidate in data['results']:
                    print(f"Name: {candidate.get('name')}")
                    print(f"Party: {candidate.get('party')}")
                    print(f"Candidate ID: {candidate.get('candidate_id')}")
                    print("-" * 50)
                
                return data['results']
            else:
                print(f"Error fetching candidates: {response.status_code}")
                print(response.text)
                return None
                
        except Exception as e:
            print(f"Error: {str(e)}")
            return None
    
    def fetch_candidate_financials(self, candidate_id):
        """Fetch financial data for a specific candidate"""
        try:
            params = {
                'api_key': self.api_key,
                'candidate_id': candidate_id,
                'per_page': 100
            }
            
            response = requests.get(f"{self.base_url}/candidate/{candidate_id}/totals", params=params)
            
            if response.status_code == 200:
                return response.json()['results']
            else:
                print(f"Error fetching financials for candidate {candidate_id}: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"Error: {str(e)}")
            return None
    
    def fetch_and_save_all_data(self):
        """Fetch and save all relevant data for CA-13"""
        print("\nStarting comprehensive data collection for CA-13...")
        
        # 1. Get candidates
        candidates = self.fetch_ca13_candidates()
        if not candidates:
            return False
        
        # 2. Get financial data for each candidate
        comprehensive_data = {
            'district': 'CA-13',
            'fetch_date': datetime.now().isoformat(),
            'candidates': {}
        }
        
        print("\nFetching financial data for each candidate...")
        for candidate in candidates:
            candidate_id = candidate.get('candidate_id')
            if candidate_id:
                print(f"\nProcessing {candidate.get('name')}...")
                financials = self.fetch_candidate_financials(candidate_id)
                
                if financials:
                    comprehensive_data['candidates'][candidate.get('name')] = {
                        'candidate_info': candidate,
                        'financial_data': financials
                    }
        
        # Save comprehensive data
        output_path = self.data_dir / 'ca13_comprehensive_data.json'
        with open(output_path, 'w') as f:
            json.dump(comprehensive_data, f, indent=2)
        
        print(f"\n✓ All data saved to: {output_path}")
        return True

if __name__ == "__main__":
    API_KEY = "dO8yZTF2MG41iRjWCXmXlgUU2WZYGRtHJwjbqm6R"
    
    print("CA-13 FEC Data Fetcher")
    print("=" * 50)
    
    # Initialize fetcher
    fetcher = FECDataFetcher(API_KEY)
    
    # Test API connection
    if fetcher.test_api_connection():
        # Fetch all data
        fetcher.fetch_and_save_all_data()
    else:
        print("Please verify your API key and try again.")



================================================================================
File: src/financial/contribution-pattern-analyzer.py
================================================================================

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import numpy as np
import json

class ContributionAnalyzer:
    def __init__(self):
        self.data_dir = Path('data/campaign_finance')
        self.visualization_dir = Path('data/visualizations')
        self.visualization_dir.mkdir(parents=True, exist_ok=True)
        
        with open(self.data_dir / 'ca13_comprehensive_data.json', 'r') as f:
            self.data = json.load(f)
            
        self.candidates = {
            'GRAY': {
                'total_raised': 5416262.01,
                'individual_contributions': 4813067.49,
                'total_spent': 4671627.25,
                'party': 'DEM'
            },
            'DUARTE': {
                'total_raised': 4147091.59,
                'individual_contributions': 1579691.68,
                'total_spent': 3213218.23,
                'party': 'REP'
            }
        }
    
    def analyze_funding_efficiency(self):
        """Analyze how effectively candidates are using their funding"""
        print("\nAnalyzing funding efficiency...")
        
        fig = plt.figure(figsize=(15, 10))
        
        # 1. Funding Source Analysis
        ax1 = plt.subplot(2, 1, 1)
        
        # Calculate funding breakdown
        breakdowns = []
        for name, data in self.candidates.items():
            individual_pct = (data['individual_contributions'] / data['total_raised']) * 100
            other_pct = ((data['total_raised'] - data['individual_contributions']) / data['total_raised']) * 100
            breakdowns.append({
                'name': name,
                'Individual': individual_pct,
                'Other Sources': other_pct
            })
        
        df_breakdown = pd.DataFrame(breakdowns)
        df_breakdown.set_index('name')[['Individual', 'Other Sources']].plot(
            kind='bar',
            stacked=True,
            ax=ax1,
            color=['#2ecc71', '#3498db']
        )
        
        plt.title('Funding Source Breakdown')
        plt.ylabel('Percentage of Total Funding')
        plt.legend(title='Source')
        
        # Add percentage labels
        for c in ax1.containers:
            ax1.bar_label(c, fmt='%.1f%%')
        
        # 2. Spending Efficiency Analysis
        ax2 = plt.subplot(2, 1, 2)
        
        metrics = {
            'Dollars Raised per Dollar Spent': [
                data['total_raised'] / data['total_spent'] 
                for data in self.candidates.values()
            ],
            'Individual Contributions per Dollar Spent': [
                data['individual_contributions'] / data['total_spent']
                for data in self.candidates.values()
            ]
        }
        
        x = np.arange(len(self.candidates))
        width = 0.35
        multiplier = 0
        
        for metric, values in metrics.items():
            offset = width * multiplier
            rects = ax2.bar(x + offset, values, width, label=metric)
            ax2.bar_label(rects, fmt='%.2f')
            multiplier += 1
        
        ax2.set_ylabel('Ratio')
        ax2.set_title('Fundraising Efficiency Metrics')
        ax2.set_xticks(x + width/2)
        ax2.set_xticklabels(self.candidates.keys())
        ax2.legend(loc='upper right')
        
        plt.tight_layout()
        plt.savefig(self.visualization_dir / 'ca13_funding_efficiency.png')
        print(f"Saved funding efficiency analysis to: {self.visualization_dir / 'ca13_funding_efficiency.png'}")
        plt.close()
        
        # Print detailed analysis
        print("\nFunding Efficiency Analysis:")
        print("-" * 50)
        
        for name, data in self.candidates.items():
            ind_pct = (data['individual_contributions'] / data['total_raised']) * 100
            spending_ratio = data['total_raised'] / data['total_spent']
            ind_spending_ratio = data['individual_contributions'] / data['total_spent']
            
            print(f"\n{name}:")
            print(f"  Individual Contributions: {ind_pct:.1f}% of total funding")
            print(f"  Dollars Raised per Dollar Spent: ${spending_ratio:.2f}")
            print(f"  Individual Contributions per Dollar Spent: ${ind_spending_ratio:.2f}")
    
    def analyze_spending_impact(self):
        """Analyze the impact of spending on fundraising"""
        print("\nAnalyzing spending impact...")
        
        plt.figure(figsize=(15, 8))
        
        # Calculate spending effectiveness metrics
        metrics = []
        for name, data in self.candidates.items():
            metrics.append({
                'name': name,
                'total_spent': data['total_spent'] / 1_000_000,  # Convert to millions
                'total_raised': data['total_raised'] / 1_000_000,
                'individual_contrib': data['individual_contributions'] / 1_000_000,
                'spending_efficiency': data['total_raised'] / data['total_spent'],
                'individual_efficiency': data['individual_contributions'] / data['total_spent']
            })
        
        df_metrics = pd.DataFrame(metrics)
        
        # Create comparison visualization
        x = np.arange(len(self.candidates))
        width = 0.25
        
        plt.bar(x - width, df_metrics['total_spent'], width, label='Total Spent', color='#e74c3c')
        plt.bar(x, df_metrics['total_raised'], width, label='Total Raised', color='#2ecc71')
        plt.bar(x + width, df_metrics['individual_contrib'], width, label='Individual Contributions', color='#3498db')
        
        plt.ylabel('Millions of Dollars')
        plt.title('Spending vs. Fundraising Comparison')
        plt.xticks(x, df_metrics['name'])
        plt.legend()
        
        # Add value labels
        def add_value_labels(x_pos, values):
            for i, v in enumerate(values):
                plt.text(x_pos[i], v, f'${v:.1f}M', ha='center', va='bottom')
        
        add_value_labels(x - width, df_metrics['total_spent'])
        add_value_labels(x, df_metrics['total_raised'])
        add_value_labels(x + width, df_metrics['individual_contrib'])
        
        plt.tight_layout()
        plt.savefig(self.visualization_dir / 'ca13_spending_impact.png')
        print(f"Saved spending impact analysis to: {self.visualization_dir / 'ca13_spending_impact.png'}")
        plt.close()
        
        # Print detailed impact analysis
        print("\nSpending Impact Analysis:")
        print("-" * 50)
        print("\nKey Differences in Spending Effectiveness:")
        
        for metric in df_metrics.itertuples():
            print(f"\n{metric.name}:")
            print(f"  Spending: ${metric.total_spent:,.1f}M")
            print(f"  Total Raised: ${metric.total_raised:,.1f}M")
            print(f"  Return on Spending: ${metric.spending_efficiency:.2f} raised per dollar spent")
            print(f"  Individual Contribution Efficiency: ${metric.individual_efficiency:.2f} in individual contributions per dollar spent")

if __name__ == "__main__":
    print("CA-13 Contribution Pattern Analysis")
    print("=" * 50)
    
    analyzer = ContributionAnalyzer()
    analyzer.analyze_funding_efficiency()
    analyzer.analyze_spending_impact()



================================================================================
File: src/financial/top-candidates-analyzer.py
================================================================================

import json
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import numpy as np

class TopCandidatesAnalyzer:
    def __init__(self):
        self.data_dir = Path('data/campaign_finance')
        self.visualization_dir = Path('data/visualizations')
        self.visualization_dir.mkdir(parents=True, exist_ok=True)
        
        # Load data
        with open(self.data_dir / 'ca13_comprehensive_data.json', 'r') as f:
            self.data = json.load(f)
        
        # Focus candidates
        self.focus_candidates = ['GRAY, ADAM C.', 'DUARTE, JOHN']
    
    def analyze_head_to_head(self):
        """Create head-to-head comparison of top candidates"""
        print("\nAnalyzing head-to-head comparison...")
        
        # Extract data for top candidates
        comparisons = []
        for name in self.focus_candidates:
            candidate_data = self.data['candidates'][name]
            financial_data = candidate_data['financial_data'][0]
            
            comparison = {
                'name': name,
                'party': candidate_data['candidate_info']['party'],
                'total_receipts': financial_data.get('receipts', 0),
                'total_disbursements': financial_data.get('disbursements', 0),
                'individual_contributions': financial_data.get('individual_contributions', 0),
                'pac_contributions': financial_data.get('pac_contributions', 0),
                'operating_expenditures': financial_data.get('operating_expenditures', 0),
                'loan_payments': financial_data.get('loan_payments', 0),
                'refunds': financial_data.get('refunds', 0)
            }
            comparisons.append(comparison)
        
        df = pd.DataFrame(comparisons)
        
        # Create visualization
        plt.figure(figsize=(15, 10))
        
        # 1. Financial Overview
        plt.subplot(2, 1, 1)
        metrics = ['total_receipts', 'total_disbursements', 'individual_contributions', 'pac_contributions']
        x = np.arange(len(metrics))
        width = 0.35
        
        gray_data = df[df['name'] == 'GRAY, ADAM C.'][metrics].values[0] / 1000
        duarte_data = df[df['name'] == 'DUARTE, JOHN'][metrics].values[0] / 1000
        
        plt.bar(x - width/2, gray_data, width, label='Gray (D)', color='blue', alpha=0.6)
        plt.bar(x + width/2, duarte_data, width, label='Duarte (R)', color='red', alpha=0.6)
        
        plt.title('Financial Overview: Gray vs Duarte')
        plt.xticks(x, [m.replace('_', ' ').title() for m in metrics], rotation=45)
        plt.ylabel('Thousands of Dollars')
        plt.legend()
        
        # Add value labels
        for i, v in enumerate(gray_data):
            plt.text(i - width/2, v, f'${v:,.0f}K', ha='center', va='bottom')
        for i, v in enumerate(duarte_data):
            plt.text(i + width/2, v, f'${v:,.0f}K', ha='center', va='bottom')
        
        # 2. Fundraising Efficiency
        plt.subplot(2, 1, 2)
        
        # Calculate efficiency metrics
        efficiency_metrics = pd.DataFrame([
            {
                'name': row['name'],
                'party': row['party'],
                'burn_rate': row['total_disbursements'] / row['total_receipts'] * 100,
                'individual_contribution_rate': row['individual_contributions'] / row['total_receipts'] * 100,
                'pac_contribution_rate': row['pac_contributions'] / row['total_receipts'] * 100
            }
            for _, row in df.iterrows()
        ])
        
        metrics = ['burn_rate', 'individual_contribution_rate', 'pac_contribution_rate']
        x = np.arange(len(metrics))
        
        for i, row in efficiency_metrics.iterrows():
            color = 'blue' if row['party'] == 'DEM' else 'red'
            plt.bar(x + (i-0.5)*width, 
                   [row[m] for m in metrics],
                   width,
                   label=row['name'].split(',')[0],
                   color=color,
                   alpha=0.6)
        
        plt.title('Campaign Efficiency Metrics')
        plt.xticks(x, ['Burn Rate', 'Individual Cont. Rate', 'PAC Cont. Rate'], rotation=45)
        plt.ylabel('Percentage')
        plt.legend()
        
        plt.tight_layout()
        plt.savefig(self.visualization_dir / 'ca13_head_to_head.png')
        print(f"Saved head-to-head analysis to: {self.visualization_dir / 'ca13_head_to_head.png'}")
        plt.close()
        
        # Print detailed comparison
        print("\nDetailed Head-to-Head Comparison:")
        print("-" * 50)
        
        for _, row in df.iterrows():
            print(f"\n{row['name']} ({row['party']}):")
            print(f"  Total Raised: ${row['total_receipts']:,.2f}")
            print(f"  Total Spent: ${row['total_disbursements']:,.2f}")
            print(f"  Individual Contributions: ${row['individual_contributions']:,.2f}")
            print(f"  PAC Contributions: ${row['pac_contributions']:,.2f}")
            print(f"  Burn Rate: {row['total_disbursements']/row['total_receipts']*100:.1f}%")
            
        # Calculate and print key differences
        gray_data = df[df['name'] == 'GRAY, ADAM C.'].iloc[0]
        duarte_data = df[df['name'] == 'DUARTE, JOHN'].iloc[0]
        
        fundraising_gap = gray_data['total_receipts'] - duarte_data['total_receipts']
        spending_gap = gray_data['total_disbursements'] - duarte_data['total_disbursements']
        
        print("\nKey Differences:")
        print(f"Fundraising Gap (Gray - Duarte): ${fundraising_gap:,.2f}")
        print(f"Spending Gap (Gray - Duarte): ${spending_gap:,.2f}")

if __name__ == "__main__":
    print("CA-13 Top Candidates Analysis")
    print("=" * 50)
    
    analyzer = TopCandidatesAnalyzer()
    analyzer.analyze_head_to_head()



================================================================================
File: src/financial/fundraising-strategy-analyzer.py
================================================================================

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import numpy as np
from datetime import datetime

class FundraisingStrategyAnalyzer:
    def __init__(self):
        self.data_dir = Path('data/campaign_finance')
        self.visualization_dir = Path('data/visualizations')
        self.visualization_dir.mkdir(parents=True, exist_ok=True)
        
        # Key metrics from our analysis
        self.candidate_data = {
            'GRAY': {
                'total_raised': 5416262.01,
                'individual_contrib': 4813067.49,
                'other_sources': 5416262.01 - 4813067.49,
                'total_spent': 4671627.25,
                'party': 'DEM'
            },
            'DUARTE': {
                'total_raised': 4147091.59,
                'individual_contrib': 1579691.68,
                'other_sources': 4147091.59 - 1579691.68,
                'total_spent': 3213218.23,
                'party': 'REP'
            }
        }

    def analyze_funding_strategies(self):
        """Analyze the different funding strategies employed by candidates"""
        print("\nAnalyzing funding strategies...")
        
        fig = plt.figure(figsize=(20, 10))
        
        # 1. Funding Source Distribution
        ax1 = plt.subplot(1, 2, 1)
        
        # Prepare data for stacked bars
        candidates = list(self.candidate_data.keys())
        individual = [d['individual_contrib'] for d in self.candidate_data.values()]
        other = [d['other_sources'] for d in self.candidate_data.values()]
        
        # Create stacked bars
        plt.bar(candidates, individual, label='Individual Contributions',
                color='#2ecc71', alpha=0.7)
        plt.bar(candidates, other, bottom=individual, label='Other Sources',
                color='#3498db', alpha=0.7)
        
        plt.title('Funding Source Distribution\n(in Millions $)')
        plt.ylabel('Amount Raised ($)')
        plt.legend()
        
        # Add value labels
        for i in range(len(candidates)):
            # Label for individual contributions
            plt.text(i, individual[i]/2, 
                    f'${individual[i]/1e6:.1f}M\n({individual[i]/self.candidate_data[candidates[i]]["total_raised"]*100:.1f}%)',
                    ha='center', va='center')
            # Label for other sources
            plt.text(i, individual[i] + other[i]/2,
                    f'${other[i]/1e6:.1f}M\n({other[i]/self.candidate_data[candidates[i]]["total_raised"]*100:.1f}%)',
                    ha='center', va='center')
        
        # 2. Efficiency Metrics
        ax2 = plt.subplot(1, 2, 2)
        
        metrics = {
            'Return on Spending': [d['total_raised']/d['total_spent'] for d in self.candidate_data.values()],
            'Individual Contribution Efficiency': [d['individual_contrib']/d['total_spent'] for d in self.candidate_data.values()]
        }
        
        x = np.arange(len(candidates))
        width = 0.35
        multiplier = 0
        
        for metric_name, values in metrics.items():
            offset = width * multiplier
            rects = ax2.bar(x + offset, values, width, label=metric_name)
            # Add value labels
            ax2.bar_label(rects, fmt='${:.2f}')
            multiplier += 1
        
        ax2.set_title('Fundraising Efficiency Metrics\n($ Raised per $ Spent)')
        ax2.set_xticks(x + width/2)
        ax2.set_xticklabels(candidates)
        ax2.legend(loc='upper right')
        
        plt.tight_layout()
        plt.savefig(self.visualization_dir / 'ca13_funding_strategies.png')
        print(f"Saved funding strategies analysis to: {self.visualization_dir / 'ca13_funding_strategies.png'}")
        plt.close()
        
        # Create comparative metrics
        self.analyze_comparative_metrics()
    
    def analyze_comparative_metrics(self):
        """Analyze and print comparative fundraising metrics"""
        print("\nComparative Fundraising Analysis:")
        print("-" * 50)
        
        # Calculate key comparative metrics
        for candidate, data in self.candidate_data.items():
            individual_pct = data['individual_contrib'] / data['total_raised'] * 100
            other_pct = data['other_sources'] / data['total_raised'] * 100
            roi = (data['total_raised'] - data['total_spent']) / data['total_spent'] * 100
            
            print(f"\n{candidate}:")
            print(f"  Total Fundraising: ${data['total_raised']:,.2f}")
            print(f"  Individual Contributions: ${data['individual_contrib']:,.2f} ({individual_pct:.1f}%)")
            print(f"  Other Sources: ${data['other_sources']:,.2f} ({other_pct:.1f}%)")
            print(f"  Return on Investment: {roi:+.1f}%")
            print(f"  Cost per Dollar Raised: ${data['total_spent']/data['total_raised']:.2f}")
        
        # Calculate and print key differences
        gray = self.candidate_data['GRAY']
        duarte = self.candidate_data['DUARTE']
        
        print("\nKey Differences (Gray vs Duarte):")
        print("-" * 30)
        total_gap = gray['total_raised'] - duarte['total_raised']
        individual_gap = gray['individual_contrib'] - duarte['individual_contrib']
        efficiency_gap = (gray['individual_contrib']/gray['total_spent']) - (duarte['individual_contrib']/duarte['total_spent'])
        
        print(f"Total Fundraising Gap: ${total_gap:,.2f}")
        print(f"Individual Contribution Gap: ${individual_gap:,.2f}")
        print(f"Individual Contribution Efficiency Gap: ${efficiency_gap:.2f} per dollar spent")
        
        # Strategy implications
        print("\nStrategy Implications:")
        print("-" * 30)
        print("GRAY:")
        print("- Heavy reliance on individual contributions")
        print("- Higher individual contribution efficiency")
        print("- Lower overall return on spending")
        print("\nDUARTE:")
        print("- More diverse funding sources")
        print("- Better overall return on spending")
        print("- Lower individual contribution efficiency")

if __name__ == "__main__":
    print("CA-13 Fundraising Strategy Analysis")
    print("=" * 50)
    
    analyzer = FundraisingStrategyAnalyzer()
    analyzer.analyze_funding_strategies()



================================================================================
File: src/financial/ca13-finance-analyzer.py
================================================================================

import json
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import numpy as np

class CA13FinanceAnalyzer:
    def __init__(self):
        self.data_dir = Path('data/campaign_finance')
        self.visualization_dir = Path('data/visualizations')
        self.visualization_dir.mkdir(parents=True, exist_ok=True)
        self.load_data()
    
    def load_data(self):
        """Load the comprehensive campaign finance data"""
        try:
            with open(self.data_dir / 'ca13_comprehensive_data.json', 'r') as f:
                self.data = json.load(f)
            print("Successfully loaded campaign finance data")
        except Exception as e:
            print(f"Error loading data: {str(e)}")
            return False
    
    def prepare_financial_summary(self):
        """Prepare summary of financial data for each candidate"""
        summaries = []
        
        for name, info in self.data['candidates'].items():
            financial_data = info.get('financial_data', [{}])[0]
            candidate_info = info.get('candidate_info', {})
            
            summary = {
                'name': name,
                'party': candidate_info.get('party', 'Unknown'),
                'receipts': financial_data.get('receipts', 0),
                'disbursements': financial_data.get('disbursements', 0),
                'cash_on_hand': financial_data.get('cash_on_hand_end_period', 0),
                'individual_contributions': financial_data.get('individual_contributions', 0),
                'pac_contributions': financial_data.get('pac_contributions', 0),
                'operating_expenditures': financial_data.get('operating_expenditures', 0)
            }
            summaries.append(summary)
        
        return pd.DataFrame(summaries)
    
    def analyze_campaign_finances(self):
        """Create comprehensive financial analysis"""
        print("\nAnalyzing campaign finances...")
        df = self.prepare_financial_summary()
        
        # Sort by total receipts
        df_sorted = df.sort_values('receipts', ascending=False)
        
        # Create visualizations
        plt.figure(figsize=(15, 10))
        
        # 1. Total Receipts by Candidate
        plt.subplot(2, 1, 1)
        colors = ['blue' if party == 'DEM' else 'red' for party in df_sorted['party']]
        bars = plt.bar(df_sorted['name'], df_sorted['receipts'] / 1000, color=colors)
        plt.title('Total Campaign Receipts by Candidate')
        plt.xticks(rotation=45, ha='right')
        plt.ylabel('Thousands of Dollars')
        
        # Add value labels
        for bar in bars:
            height = bar.get_height()
            plt.text(bar.get_x() + bar.get_width()/2., height,
                    f'${height:,.0f}K',
                    ha='center', va='bottom')
        
        # 2. Cash on Hand Comparison
        plt.subplot(2, 1, 2)
        metrics = ['cash_on_hand', 'disbursements']
        bar_width = 0.35
        index = np.arange(len(df_sorted))
        
        for i, metric in enumerate(metrics):
            offset = i * bar_width
            plt.bar(index + offset, df_sorted[metric] / 1000, bar_width,
                   label=metric.replace('_', ' ').title(),
                   color=['lightblue', 'lightgreen'][i])
        
        plt.title('Cash on Hand vs Disbursements')
        plt.xticks(index + bar_width/2, df_sorted['name'], rotation=45, ha='right')
        plt.ylabel('Thousands of Dollars')
        plt.legend()
        
        plt.tight_layout()
        plt.savefig(self.visualization_dir / 'ca13_campaign_finance_overview.png')
        print(f"Saved finance overview to: {self.visualization_dir / 'ca13_campaign_finance_overview.png'}")
        plt.close()
        
        # Print detailed analysis
        print("\nDetailed Financial Analysis:")
        print("-" * 50)
        
        # By party totals
        party_totals = df.groupby('party').agg({
            'receipts': 'sum',
            'disbursements': 'sum',
            'cash_on_hand': 'sum'
        })
        
        print("\nTotals by Party:")
        for party, totals in party_totals.iterrows():
            print(f"\n{party}:")
            print(f"  Total Raised: ${totals['receipts']:,.2f}")
            print(f"  Total Spent: ${totals['disbursements']:,.2f}")
            print(f"  Cash on Hand: ${totals['cash_on_hand']:,.2f}")
        
        # Top fundraisers
        print("\nTop Fundraisers:")
        for _, row in df_sorted.head(3).iterrows():
            print(f"\n{row['name']} ({row['party']}):")
            print(f"  Total Raised: ${row['receipts']:,.2f}")
            print(f"  Cash on Hand: ${row['cash_on_hand']:,.2f}")
            print(f"  Burn Rate: {(row['disbursements']/row['receipts']*100 if row['receipts'] > 0 else 0):.1f}%")

    def analyze_contribution_patterns(self):
        """Analyze patterns in campaign contributions"""
        df = self.prepare_financial_summary()
        
        plt.figure(figsize=(15, 8))
        
        # Calculate contribution breakdown
        df['individual_pct'] = df['individual_contributions'] / df['receipts'] * 100
        df['pac_pct'] = df['pac_contributions'] / df['receipts'] * 100
        
        # Sort by total receipts
        df_sorted = df.sort_values('receipts', ascending=False)
        
        # Stacked bar chart of contribution sources
        contribution_data = pd.DataFrame({
            'Individual': df_sorted['individual_contributions'],
            'PAC': df_sorted['pac_contributions'],
            'Other': df_sorted['receipts'] - df_sorted['individual_contributions'] - df_sorted['pac_contributions']
        }, index=df_sorted['name'])
        
        ax = contribution_data.plot(kind='bar', stacked=True)
        plt.title('Contribution Sources by Candidate')
        plt.xlabel('Candidate')
        plt.ylabel('Dollars')
        plt.xticks(rotation=45, ha='right')
        plt.legend(title='Source')
        
        plt.tight_layout()
        plt.savefig(self.visualization_dir / 'ca13_contribution_patterns.png')
        print(f"\nSaved contribution patterns to: {self.visualization_dir / 'ca13_contribution_patterns.png'}")
        plt.close()

if __name__ == "__main__":
    print("CA-13 Campaign Finance Analysis")
    print("=" * 50)
    
    analyzer = CA13FinanceAnalyzer()
    analyzer.analyze_campaign_finances()
    analyzer.analyze_contribution_patterns()



================================================================================
File: src/exploration/data_explorer.py
================================================================================

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
try:
    import seaborn as sns
    sns.set_theme(style="whitegrid")  # Set seaborn style
except ImportError:
    print("Seaborn not installed, using default matplotlib style")
    plt.style.use('default')

from pathlib import Path

class CA13DataExplorer:
    def __init__(self):
        self.data_dir = Path('data')
        self.analysis_dir = self.data_dir / 'analysis'
        self.visualization_dir = self.data_dir / 'visualizations'
        self.visualization_dir.mkdir(exist_ok=True)
        
        # Demographics data from our previous analysis
        self.demographics = {
            'Hispanic': {'cvap': 197495, 'turnout_rate': 0.54},
            'Black': {'cvap': 16130, 'turnout_rate': 0.63},
            'Asian': {'cvap': 24392, 'turnout_rate': 0.59},
            'White': {'cvap': 145957, 'turnout_rate': 0.71}
        }
        
        # Set colors for consistency
        self.colors = ['#2ecc71', '#3498db', '#e74c3c', '#f1c40f']
        
        # Print available matplotlib styles
        print("\nAvailable matplotlib styles:")
        print(plt.style.available)
    
    def create_demographic_deep_dive(self):
        """Create detailed demographic visualizations"""
        print("\nCreating demographic analysis visualizations...")
        
        # Create figure with multiple subplots
        fig = plt.figure(figsize=(20, 15))
        
        # 1. CVAP Distribution (Pie Chart)
        ax1 = plt.subplot(2, 2, 1)
        cvap_values = [d['cvap'] for d in self.demographics.values()]
        plt.pie(cvap_values, labels=self.demographics.keys(), autopct='%1.1f%%',
                colors=self.colors, startangle=90)
        plt.title('CVAP Distribution in CA-13', pad=20, size=14)
        
        # 2. CVAP vs Turnout (Bar Chart)
        ax2 = plt.subplot(2, 2, 2)
        groups = list(self.demographics.keys())
        cvap = [d['cvap'] for d in self.demographics.values()]
        expected_turnout = [d['cvap'] * d['turnout_rate'] for d in self.demographics.values()]
        
        x = np.arange(len(groups))
        width = 0.35
        
        ax2.bar(x - width/2, cvap, width, label='Total CVAP', color='lightblue')
        ax2.bar(x + width/2, expected_turnout, width, label='Expected Turnout', color='darkblue')
        ax2.set_xticks(x)
        ax2.set_xticklabels(groups)
        ax2.legend()
        plt.title('CVAP vs Expected Turnout by Demographic', pad=20, size=14)
        plt.xticks(rotation=45)
        
        # 3. Turnout Rates (Horizontal Bar Chart)
        ax3 = plt.subplot(2, 2, 3)
        turnout_rates = [d['turnout_rate'] * 100 for d in self.demographics.values()]
        
        bars = ax3.barh(groups, turnout_rates, color=self.colors)
        ax3.set_xlim(0, 100)
        plt.title('Historical Turnout Rates by Demographic (%)', pad=20, size=14)
        
        # Add percentage labels on bars
        for bar in bars:
            width = bar.get_width()
            ax3.text(width + 1, bar.get_y() + bar.get_height()/2,
                    f'{width:.1f}%', ha='left', va='center')
        
        # 4. Demographic Impact (Stacked Bar)
        ax4 = plt.subplot(2, 2, 4)
        impact_data = pd.DataFrame({
            'CVAP': cvap,
            'Non-Voters': [d['cvap'] * (1 - d['turnout_rate']) for d in self.demographics.values()],
            'Likely Voters': expected_turnout
        }, index=groups)
        
        impact_data.plot(kind='bar', stacked=True, ax=ax4)
        plt.title('Voting Impact by Demographic', pad=20, size=14)
        plt.xticks(rotation=45)
        
        plt.tight_layout(pad=3.0)
        plt.savefig(self.visualization_dir / 'CA13_demographic_analysis.png')
        print(f"Saved demographic visualizations to: {self.visualization_dir / 'CA13_demographic_analysis.png'}")
        plt.close()
        
        # Return the data for verification
        return impact_data

if __name__ == "__main__":
    print("CA-13 Data Exploration and Visualization")
    print("=" * 50)
    
    # Create explorer instance
    explorer = CA13DataExplorer()
    
    # Create demographic visualizations
    impact_data = explorer.create_demographic_deep_dive()
    
    # Print the data for verification
    print("\nDemographic Impact Data:")
    print(impact_data)


================================================================================
File: src/exploration/ca13-margin-analyzer.py
================================================================================

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path

class CA13MarginAnalyzer:
    def __init__(self):
        self.data_dir = Path('data')
        self.visualization_dir = self.data_dir / 'visualizations'
        self.visualization_dir.mkdir(exist_ok=True)
        
        # Base demographic data
        self.demographics = {
            'Hispanic': {
                'cvap': 197495,
                'turnout_rate': 0.54,
                'base_share': 0.454
            },
            'Black': {
                'cvap': 16130,
                'turnout_rate': 0.63,
                'base_share': 0.043
            },
            'Asian': {
                'cvap': 24392,
                'turnout_rate': 0.59,
                'base_share': 0.061
            },
            'White': {
                'cvap': 145957,
                'turnout_rate': 0.71,
                'base_share': 0.441
            }
        }
        
        # Turnout impact data
        self.turnout_impacts = {
            '0%':  {'Hispanic': 45.4, 'Black': 4.3, 'Asian': 6.1, 'White': 44.1},
            '5%':  {'Hispanic': 45.9, 'Black': 4.3, 'Asian': 6.1, 'White': 43.7},
            '10%': {'Hispanic': 46.3, 'Black': 4.3, 'Asian': 6.2, 'White': 43.3},
            '15%': {'Hispanic': 46.6, 'Black': 4.3, 'Asian': 6.2, 'White': 42.9}
        }
    
    def calculate_margins(self):
        """Calculate Hispanic-White margins across scenarios"""
        margins = []
        scenarios = ['0%', '5%', '10%', '15%']
        for scenario in scenarios:
            margin = self.turnout_impacts[scenario]['Hispanic'] - self.turnout_impacts[scenario]['White']
            margins.append(margin)
        return margins, scenarios
    
    def analyze_turnout_patterns(self):
        """Analyze detailed turnout patterns"""
        print("\nAnalyzing turnout patterns...")
        
        margins, scenarios = self.calculate_margins()
        
        # Plot turnout pattern analysis
        fig = plt.figure(figsize=(20, 10))
        
        # 1. Vote Share Changes
        ax1 = plt.subplot(1, 2, 1)
        for group in ['Hispanic', 'White', 'Asian', 'Black']:
            shares = [self.turnout_impacts[s][group] for s in scenarios]
            plt.plot(scenarios, shares, marker='o', label=group)
        
        plt.title('Vote Share by Demographic\nAcross Turnout Scenarios')
        plt.xlabel('Turnout Improvement Scenario')
        plt.ylabel('Vote Share (%)')
        plt.legend()
        plt.grid(True)
        
        # 2. Hispanic-White Margin
        ax2 = plt.subplot(1, 2, 2)
        plt.bar(scenarios, margins, color=['green' if m > 0 else 'red' for m in margins])
        plt.title('Hispanic-White Vote Share Margin\nBy Turnout Scenario')
        plt.xlabel('Turnout Improvement Scenario')
        plt.ylabel('Margin (Percentage Points)')
        
        # Add value labels
        for i, margin in enumerate(margins):
            plt.annotate(f'{margin:+.1f}',
                        (scenarios[i], margin),
                        textcoords="offset points",
                        xytext=(0,10),
                        ha='center')
        
        plt.tight_layout()
        plt.savefig(self.visualization_dir / 'CA13_turnout_patterns.png')
        print(f"Saved turnout pattern analysis to: {self.visualization_dir / 'CA13_turnout_patterns.png'}")
        plt.close()
        
        # Print detailed analysis
        print("\nDetailed Turnout Analysis:")
        print("-" * 50)
        print(f"Initial Hispanic-White margin: {margins[0]:+.1f} points")
        print(f"Final Hispanic-White margin: {margins[-1]:+.1f} points")
        print(f"Total margin change: {margins[-1] - margins[0]:+.1f} points")
        
        # Analyze demographic shifts
        print("\nDemographic Shifts:")
        print("-" * 50)
        for group in self.demographics:
            initial = self.turnout_impacts['0%'][group]
            final = self.turnout_impacts['15%'][group]
            change = final - initial
            print(f"{group}:")
            print(f"  Initial share: {initial:.1f}%")
            print(f"  Final share: {final:.1f}%")
            print(f"  Net change: {change:+.1f} points")
    
    def analyze_combined_minority_impact(self):
        """Analyze combined minority voting power"""
        print("\nAnalyzing combined minority impact...")
        
        scenarios = ['0%', '5%', '10%', '15%']
        minority_shares = []
        white_shares = []
        
        for scenario in scenarios:
            minority = (self.turnout_impacts[scenario]['Hispanic'] + 
                       self.turnout_impacts[scenario]['Black'] + 
                       self.turnout_impacts[scenario]['Asian'])
            minority_shares.append(minority)
            white_shares.append(self.turnout_impacts[scenario]['White'])
        
        # Plot combined minority analysis
        plt.figure(figsize=(12, 8))
        plt.plot(scenarios, minority_shares, 'g-o', label='Combined Minority', linewidth=2)
        plt.plot(scenarios, white_shares, 'b-o', label='White', linewidth=2)
        
        plt.title('Combined Minority vs White Share\nUnder Turnout Improvements')
        plt.xlabel('Turnout Improvement Scenario')
        plt.ylabel('Vote Share (%)')
        plt.legend()
        plt.grid(True)
        
        # Add value labels
        for i, (min_share, white_share) in enumerate(zip(minority_shares, white_shares)):
            plt.annotate(f'{min_share:.1f}%', 
                        (scenarios[i], min_share),
                        textcoords="offset points",
                        xytext=(0,10),
                        ha='center')
            plt.annotate(f'{white_share:.1f}%', 
                        (scenarios[i], white_share),
                        textcoords="offset points",
                        xytext=(0,-15),
                        ha='center')
        
        plt.tight_layout()
        plt.savefig(self.visualization_dir / 'CA13_minority_impact.png')
        print(f"Saved minority impact analysis to: {self.visualization_dir / 'CA13_minority_impact.png'}")
        plt.close()
        
        # Print analysis
        print("\nCombined Minority vs White Analysis:")
        print("-" * 50)
        for i, scenario in enumerate(scenarios):
            print(f"\n{scenario} Improvement:")
            print(f"  Combined Minority: {minority_shares[i]:.1f}%")
            print(f"  White: {white_shares[i]:.1f}%")
            print(f"  Margin: {minority_shares[i] - white_shares[i]:+.1f} points")

if __name__ == "__main__":
    print("CA-13 Turnout Impact Analysis")
    print("=" * 50)
    
    analyzer = CA13MarginAnalyzer()
    analyzer.analyze_turnout_patterns()
    analyzer.analyze_combined_minority_impact()


================================================================================
File: src/exploration/ca13-voting-patterns.py
================================================================================

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path

class CA13VotingPatternAnalyzer:
    def __init__(self):
        self.data_dir = Path('data')
        self.visualization_dir = self.data_dir / 'visualizations'
        self.visualization_dir.mkdir(exist_ok=True)
        
        # Demographics data with extended information
        self.demographics = {
            'Hispanic': {
                'cvap': 197495, 
                'turnout_rate': 0.54,
                'expected_votes': 106647,
                'share': 0.454
            },
            'Black': {
                'cvap': 16130, 
                'turnout_rate': 0.63,
                'expected_votes': 10162,
                'share': 0.043
            },
            'Asian': {
                'cvap': 24392, 
                'turnout_rate': 0.59,
                'expected_votes': 14391,
                'share': 0.061
            },
            'White': {
                'cvap': 145957, 
                'turnout_rate': 0.71,
                'expected_votes': 103629,
                'share': 0.441
            }
        }
        
        plt.style.use('seaborn-v0_8-darkgrid')
    
    def analyze_voter_composition(self):
        """Create detailed voter composition analysis"""
        print("\nAnalyzing voter composition...")
        
        fig = plt.figure(figsize=(20, 10))
        
        # 1. Voter Power Index
        ax1 = plt.subplot(1, 2, 1)
        groups = list(self.demographics.keys())
        cvap_share = [d['cvap']/sum(d['cvap'] for d in self.demographics.values()) for d in self.demographics.values()]
        voter_share = [d['share'] for d in self.demographics.values()]
        power_index = [v/c for v, c in zip(voter_share, cvap_share)]
        
        bars = plt.bar(groups, power_index)
        plt.axhline(y=1, color='r', linestyle='--', alpha=0.5)
        plt.title('Voter Power Index\n(Share of Votes / Share of Population)')
        plt.ylabel('Power Index (1.0 = Proportional Representation)')
        
        # Add value labels on bars
        for bar in bars:
            height = bar.get_height()
            plt.text(bar.get_x() + bar.get_width()/2., height,
                    f'{height:.2f}',
                    ha='center', va='bottom')
        
        # 2. Comparative Influence Analysis
        ax2 = plt.subplot(1, 2, 2)
        
        # Create a matrix of relative voting power
        total_votes = sum(d['expected_votes'] for d in self.demographics.values())
        voting_power = {}
        
        for g1 in groups:
            voting_power[g1] = {}
            for g2 in groups:
                if g1 != g2:
                    ratio = self.demographics[g1]['expected_votes'] / self.demographics[g2]['expected_votes']
                    voting_power[g1][g2] = ratio
        
        power_df = pd.DataFrame(voting_power)
        sns.heatmap(power_df, annot=True, fmt='.2f', cmap='RdYlBu')
        plt.title('Relative Voting Power Matrix\n(Row Group / Column Group)')
        
        plt.tight_layout()
        plt.savefig(self.visualization_dir / 'CA13_voter_composition.png')
        print(f"Saved voter composition analysis to: {self.visualization_dir / 'CA13_voter_composition.png'}")
        plt.close()
    
    def analyze_turnout_scenarios(self):
        """Analyze different turnout scenarios"""
        print("\nAnalyzing turnout scenarios...")
        
        fig = plt.figure(figsize=(20, 10))
        
        # 1. Turnout Sensitivity Analysis
        ax1 = plt.subplot(1, 2, 1)
        
        # Create turnout scenarios
        scenarios = {
            'Current': [d['turnout_rate'] for d in self.demographics.values()],
            '+5%': [min(1, d['turnout_rate'] + 0.05) for d in self.demographics.values()],
            '+10%': [min(1, d['turnout_rate'] + 0.10) for d in self.demographics.values()],
            'Maximum': [1.0 for _ in self.demographics.values()]
        }
        
        x = np.arange(len(self.demographics))
        width = 0.2
        multiplier = 0
        
        for scenario, rates in scenarios.items():
            offset = width * multiplier
            plt.bar(x + offset, np.array(rates) * 100, width, label=scenario)
            multiplier += 1
        
        plt.xlabel('Demographic Group')
        plt.ylabel('Turnout Rate (%)')
        plt.title('Turnout Scenarios')
        plt.xticks(x + width * 1.5, self.demographics.keys())
        plt.legend(loc='upper right')
        
        # 2. Voting Power Balance
        ax2 = plt.subplot(1, 2, 2)
        
        # Calculate current voting power balance
        total_votes = sum(d['expected_votes'] for d in self.demographics.values())
        hispanic_white_ratio = self.demographics['Hispanic']['expected_votes'] / self.demographics['White']['expected_votes']
        minority_combined = (self.demographics['Hispanic']['expected_votes'] + 
                           self.demographics['Black']['expected_votes'] + 
                           self.demographics['Asian']['expected_votes'])
        minority_ratio = minority_combined / total_votes
        
        plt.pie([minority_combined, self.demographics['White']['expected_votes']], 
                labels=['Combined Minority', 'White'],
                autopct='%1.1f%%',
                colors=['#2ecc71', '#3498db'])
        plt.title('Combined Minority vs White Voting Power')
        
        plt.tight_layout()
        plt.savefig(self.visualization_dir / 'CA13_turnout_scenarios.png')
        print(f"Saved turnout scenarios analysis to: {self.visualization_dir / 'CA13_turnout_scenarios.png'}")
        plt.close()
        
        # Print detailed analysis
        print("\nDetailed Voting Power Analysis:")
        print("-" * 50)
        print(f"Hispanic/White Voting Power Ratio: {hispanic_white_ratio:.2f}")
        print(f"Combined Minority Share: {minority_ratio*100:.1f}%")
        
        print("\nTurnout Impact Analysis:")
        print("-" * 50)
        for group, data in self.demographics.items():
            current_share = data['expected_votes'] / total_votes
            max_potential = data['cvap'] / sum(d['cvap'] for d in self.demographics.values())
            print(f"\n{group}:")
            print(f"  Current Voting Share: {current_share*100:.1f}%")
            print(f"  Maximum Potential Share: {max_potential*100:.1f}%")
            print(f"  Untapped Potential: {(max_potential - current_share)*100:.1f}%")

if __name__ == "__main__":
    print("CA-13 Voting Pattern Analysis")
    print("=" * 50)
    
    analyzer = CA13VotingPatternAnalyzer()
    analyzer.analyze_voter_composition()
    analyzer.analyze_turnout_scenarios()



================================================================================
File: src/exploration/historical_election_analyzer.py
================================================================================

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path

class HistoricalElectionAnalyzer:
    def __init__(self):
        self.data_dir = Path('data')
        self.analysis_dir = self.data_dir / 'analysis'
        self.analysis_dir.mkdir(exist_ok=True)
        
        # Sample historical election data (we'll replace this with actual data)
        self.historical_data = {
            '2020': {'dem': 56.4, 'rep': 43.6, 'turnout': 82.5},
            '2018': {'dem': 54.8, 'rep': 45.2, 'turnout': 65.3},
            '2016': {'dem': 55.2, 'rep': 44.8, 'turnout': 78.4}
        }
    
    def analyze_historical_trends(self):
        """Analyze historical election trends"""
        print("CA-13 Historical Election Analysis")
        print("=" * 50)
        
        # Create DataFrames for analysis
        years = list(self.historical_data.keys())
        dem_share = [self.historical_data[year]['dem'] for year in years]
        rep_share = [self.historical_data[year]['rep'] for year in years]
        turnout = [self.historical_data[year]['turnout'] for year in years]
        
        df = pd.DataFrame({
            'Year': years,
            'Democratic': dem_share,
            'Republican': rep_share,
            'Turnout': turnout
        })
        
        # Calculate metrics
        dem_avg = np.mean(dem_share)
        rep_avg = np.mean(rep_share)
        turnout_avg = np.mean(turnout)
        
        # Print analysis
        print("\nHistorical Voting Patterns:")
        print("-" * 30)
        print(f"Average Democratic Vote Share: {dem_avg:.1f}%")
        print(f"Average Republican Vote Share: {rep_avg:.1f}%")
        print(f"Average Turnout: {turnout_avg:.1f}%")
        
        # Create visualizations
        self.create_historical_plots(df)
        
        # Save analysis
        self.save_historical_analysis(df)
        
    def create_historical_plots(self, df):
        """Create visualizations of historical trends"""
        plt.figure(figsize=(15, 6))
        
        # Vote share trends
        plt.subplot(1, 2, 1)
        plt.plot(df['Year'], df['Democratic'], 'b-o', label='Democratic')
        plt.plot(df['Year'], df['Republican'], 'r-o', label='Republican')
        plt.title('Party Vote Share Over Time')
        plt.ylabel('Vote Share (%)')
        plt.legend()
        plt.grid(True)
        
        # Turnout trends
        plt.subplot(1, 2, 2)
        plt.plot(df['Year'], df['Turnout'], 'g-o')
        plt.title('Voter Turnout Over Time')
        plt.ylabel('Turnout (%)')
        plt.grid(True)
        
        plt.tight_layout()
        plt.savefig(self.analysis_dir / 'CA13_historical_trends.png')
        print(f"\nSaved historical trend visualizations to: {self.analysis_dir / 'CA13_historical_trends.png'}")
        plt.show()
    
    def save_historical_analysis(self, df):
        """Save historical analysis to file"""
        analysis_path = self.analysis_dir / 'CA13_historical_analysis.txt'
        
        with open(analysis_path, 'w') as f:
            f.write("CA-13 Historical Election Analysis\n")
            f.write("=" * 50 + "\n\n")
            
            f.write("Year-by-Year Results:\n")
            f.write("-" * 20 + "\n")
            for year in self.historical_data.keys():
                data = self.historical_data[year]
                f.write(f"\n{year}:\n")
                f.write(f"  Democratic: {data['dem']:.1f}%\n")
                f.write(f"  Republican: {data['rep']:.1f}%\n")
                f.write(f"  Turnout: {data['turnout']:.1f}%\n")
            
            f.write("\nAverages:\n")
            f.write("-" * 20 + "\n")
            f.write(f"Democratic: {df['Democratic'].mean():.1f}%\n")
            f.write(f"Republican: {df['Republican'].mean():.1f}%\n")
            f.write(f"Turnout: {df['Turnout'].mean():.1f}%\n")
        
        print(f"\nSaved historical analysis to: {analysis_path}")

if __name__ == "__main__":
    analyzer = HistoricalElectionAnalyzer()
    analyzer.analyze_historical_trends()



================================================================================
File: src/exploration/ca13-potential-analysis.py
================================================================================

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path

class CA13PotentialAnalyzer:
    def __init__(self):
        self.data_dir = Path('data')
        self.visualization_dir = self.data_dir / 'visualizations'
        self.visualization_dir.mkdir(exist_ok=True)
        
        # Demographics with current and potential data
        self.demographics = {
            'Hispanic': {
                'current_share': 0.454,
                'potential_share': 0.514,
                'untapped': 0.060,
                'cvap': 197495,
                'turnout_rate': 0.54
            },
            'Black': {
                'current_share': 0.043,
                'potential_share': 0.042,
                'untapped': -0.001,
                'cvap': 16130,
                'turnout_rate': 0.63
            },
            'Asian': {
                'current_share': 0.061,
                'potential_share': 0.064,
                'untapped': 0.002,
                'cvap': 24392,
                'turnout_rate': 0.59
            },
            'White': {
                'current_share': 0.441,
                'potential_share': 0.380,
                'untapped': -0.061,
                'cvap': 145957,
                'turnout_rate': 0.71
            }
        }
        
        plt.style.use('seaborn-v0_8-darkgrid')
    
    def analyze_potential_shifts(self):
        """Analyze potential demographic voting power shifts"""
        print("\nAnalyzing potential demographic shifts...")
        
        fig = plt.figure(figsize=(20, 10))
        
        # 1. Current vs Potential Share Comparison
        ax1 = plt.subplot(1, 2, 1)
        groups = list(self.demographics.keys())
        current = [d['current_share'] * 100 for d in self.demographics.values()]
        potential = [d['potential_share'] * 100 for d in self.demographics.values()]
        
        x = np.arange(len(groups))
        width = 0.35
        
        bars1 = ax1.bar(x - width/2, current, width, label='Current Share',
                       color='lightblue')
        bars2 = ax1.bar(x + width/2, potential, width, label='Potential Share',
                       color='darkblue')
        
        ax1.set_ylabel('Vote Share (%)')
        ax1.set_title('Current vs Maximum Potential Vote Share')
        ax1.set_xticks(x)
        ax1.set_xticklabels(groups)
        ax1.legend()
        
        # Add value labels
        def autolabel(bars):
            for bar in bars:
                height = bar.get_height()
                ax1.text(bar.get_x() + bar.get_width()/2., height,
                        f'{height:.1f}%', ha='center', va='bottom')
        
        autolabel(bars1)
        autolabel(bars2)
        
        # 2. Untapped Potential Analysis
        ax2 = plt.subplot(1, 2, 2)
        untapped = [d['untapped'] * 100 for d in self.demographics.values()]
        colors = ['green' if x > 0 else 'red' for x in untapped]
        
        bars = ax2.bar(groups, untapped, color=colors)
        ax2.axhline(y=0, color='black', linestyle='-', alpha=0.2)
        ax2.set_title('Untapped Voting Potential by Demographic')
        ax2.set_ylabel('Untapped Potential (%)')
        
        # Add value labels
        for bar in bars:
            height = bar.get_height()
            ax2.text(bar.get_x() + bar.get_width()/2., height,
                    f'{height:+.1f}%', ha='center', va='bottom' if height > 0 else 'top')
        
        plt.tight_layout()
        plt.savefig(self.visualization_dir / 'CA13_potential_shifts.png')
        print(f"Saved potential shifts analysis to: {self.visualization_dir / 'CA13_potential_shifts.png'}")
        plt.close()
    
    def analyze_turnout_impact(self):
        """Analyze impact of turnout improvements"""
        print("\nAnalyzing turnout impact scenarios...")
        
        fig = plt.figure(figsize=(20, 10))
        
        # 1. Turnout Improvement Scenarios
        ax1 = plt.subplot(1, 2, 1)
        
        # Calculate vote shares under different turnout improvements
        improvements = [0, 0.05, 0.10, 0.15]  # 0%, 5%, 10%, 15% improvements
        scenarios = {}
        
        for imp in improvements:
            shares = {}
            total_votes = 0
            
            # Calculate total votes under this scenario
            for group, data in self.demographics.items():
                new_turnout = min(1.0, data['turnout_rate'] + imp)
                votes = data['cvap'] * new_turnout
                total_votes += votes
            
            # Calculate shares
            for group, data in self.demographics.items():
                new_turnout = min(1.0, data['turnout_rate'] + imp)
                votes = data['cvap'] * new_turnout
                shares[group] = (votes / total_votes) * 100
            
            scenarios[f'+{int(imp*100)}%'] = shares
        
        # Plot the scenarios
        x = np.arange(len(scenarios))
        width = 0.2
        multiplier = 0
        
        for group in self.demographics.keys():
            offset = width * multiplier
            values = [scenarios[s][group] for s in scenarios.keys()]
            plt.bar(x + offset, values, width, label=group)
            multiplier += 1
        
        plt.xlabel('Turnout Improvement Scenario')
        plt.ylabel('Vote Share (%)')
        plt.title('Vote Share Under Different Turnout Improvements')
        plt.xticks(x + width * 1.5, scenarios.keys())
        plt.legend(title='Demographic Group')
        
        # 2. Power Balance Analysis
        ax2 = plt.subplot(1, 2, 2)
        
        # Calculate current and maximum minority power
        current_minority = sum(d['current_share'] for group, d in self.demographics.items() 
                             if group != 'White')
        potential_minority = sum(d['potential_share'] for group, d in self.demographics.items() 
                               if group != 'White')
        
        data = pd.DataFrame({
            'Status': ['Current', 'Potential'],
            'Minority': [current_minority * 100, potential_minority * 100],
            'White': [(1-current_minority) * 100, (1-potential_minority) * 100]
        })
        
        data.plot(kind='bar', ax=ax2, width=0.8)
        plt.title('Minority vs White Voting Power')
        plt.xlabel('Scenario')
        plt.ylabel('Share of Vote (%)')
        
        # Add value labels
        for i in ax2.containers:
            ax2.bar_label(i, fmt='%.1f%%')
        
        plt.tight_layout()
        plt.savefig(self.visualization_dir / 'CA13_turnout_impact.png')
        print(f"Saved turnout impact analysis to: {self.visualization_dir / 'CA13_turnout_impact.png'}")
        plt.close()
        
        # Print detailed analysis
        print("\nTurnout Impact Analysis:")
        print("-" * 50)
        print("\nVote Share Under Different Turnout Improvements:")
        for scenario, shares in scenarios.items():
            print(f"\n{scenario} Improvement:")
            for group, share in shares.items():
                print(f"  {group}: {share:.1f}%")

if __name__ == "__main__":
    print("CA-13 Potential and Shift Analysis")
    print("=" * 50)
    
    analyzer = CA13PotentialAnalyzer()
    analyzer.analyze_potential_shifts()
    analyzer.analyze_turnout_impact()



================================================================================
File: src/exploration/ca13-enhanced-explorer.py
================================================================================

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path

class CA13EnhancedExplorer:
    def __init__(self):
        self.data_dir = Path('data')
        self.visualization_dir = self.data_dir / 'visualizations'
        self.visualization_dir.mkdir(exist_ok=True)
        
        # Demographics data
        self.demographics = {
            'Hispanic': {'cvap': 197495, 'turnout_rate': 0.54},
            'Black': {'cvap': 16130, 'turnout_rate': 0.63},
            'Asian': {'cvap': 24392, 'turnout_rate': 0.59},
            'White': {'cvap': 145957, 'turnout_rate': 0.71}
        }
        
        # Color schemes
        self.colors = {
            'main': ['#2ecc71', '#3498db', '#e74c3c', '#f1c40f'],
            'pastel': ['#a8e6cf', '#dcedc1', '#ffd3b6', '#ffaaa5'],
            'dark': ['#1a535c', '#4ecdc4', '#ff6b6b', '#ffe66d']
        }
    
    def create_turnout_analysis(self):
        """Create detailed turnout analysis visualizations"""
        plt.style.use('seaborn-v0_8-darkgrid')
        print("\nCreating turnout analysis visualizations...")
        
        fig = plt.figure(figsize=(20, 10))
        
        # 1. Turnout Rate vs Population Size
        ax1 = plt.subplot(1, 2, 1)
        x = [d['cvap'] for d in self.demographics.values()]
        y = [d['turnout_rate'] * 100 for d in self.demographics.values()]
        sizes = [d['cvap']/1000 for d in self.demographics.values()]  # Size proportional to population
        
        plt.scatter(x, y, s=sizes, c=self.colors['main'], alpha=0.6)
        
        # Add labels for each point
        for i, (group, data) in enumerate(self.demographics.items()):
            plt.annotate(group, 
                        (data['cvap'], data['turnout_rate'] * 100),
                        xytext=(10, 10), textcoords='offset points')
        
        plt.xlabel('CVAP Population')
        plt.ylabel('Turnout Rate (%)')
        plt.title('Turnout Rate vs Population Size')
        
        # 2. Relative Voting Power Analysis
        ax2 = plt.subplot(1, 2, 2)
        total_cvap = sum(d['cvap'] for d in self.demographics.values())
        total_voters = sum(d['cvap'] * d['turnout_rate'] for d in self.demographics.values())
        
        pop_share = [d['cvap']/total_cvap * 100 for d in self.demographics.values()]
        voter_share = [(d['cvap'] * d['turnout_rate'])/total_voters * 100 for d in self.demographics.values()]
        
        x = np.arange(len(self.demographics))
        width = 0.35
        
        ax2.bar(x - width/2, pop_share, width, label='Population Share', color='lightblue')
        ax2.bar(x + width/2, voter_share, width, label='Voter Share', color='darkblue')
        
        plt.xticks(x, self.demographics.keys(), rotation=45)
        plt.ylabel('Percentage')
        plt.title('Population Share vs Voter Share')
        plt.legend()
        
        plt.tight_layout()
        plt.savefig(self.visualization_dir / 'CA13_turnout_analysis.png')
        print(f"Saved turnout analysis to: {self.visualization_dir / 'CA13_turnout_analysis.png'}")
        plt.close()
    
    def create_comparative_analysis(self):
        """Create comparative demographic analysis"""
        plt.style.use('seaborn-v0_8-white')
        print("\nCreating comparative analysis visualizations...")
        
        fig = plt.figure(figsize=(20, 10))
        
        # 1. Normalized Comparison
        ax1 = plt.subplot(1, 2, 1)
        
        # Normalize the data
        max_cvap = max(d['cvap'] for d in self.demographics.values())
        max_turnout = max(d['turnout_rate'] for d in self.demographics.values())
        
        normalized_data = pd.DataFrame({
            'Population': [d['cvap']/max_cvap for d in self.demographics.values()],
            'Turnout Rate': [d['turnout_rate']/max_turnout for d in self.demographics.values()]
        }, index=self.demographics.keys())
        
        normalized_data.plot(kind='bar', ax=ax1, color=self.colors['pastel'])
        plt.title('Normalized Comparison (Relative to Maximum)')
        plt.legend(loc='upper right')
        
        # 2. Demographic Contribution to Total Votes
        ax2 = plt.subplot(1, 2, 2)
        votes = [d['cvap'] * d['turnout_rate'] for d in self.demographics.values()]
        plt.pie(votes, labels=self.demographics.keys(), colors=self.colors['dark'],
                autopct='%1.1f%%', startangle=90)
        plt.title('Contribution to Total Votes')
        
        plt.tight_layout()
        plt.savefig(self.visualization_dir / 'CA13_comparative_analysis.png')
        print(f"Saved comparative analysis to: {self.visualization_dir / 'CA13_comparative_analysis.png'}")
        plt.close()
        
        # Print numerical analysis
        total_votes = sum(votes)
        print("\nNumerical Analysis:")
        print("-" * 50)
        for group, vote_count in zip(self.demographics.keys(), votes):
            print(f"{group}:")
            print(f"  Expected Votes: {vote_count:,.0f}")
            print(f"  Share of Total Votes: {(vote_count/total_votes)*100:.1f}%")
    
    def create_combined_report(self):
        """Create a combined analysis report"""
        report_path = self.visualization_dir / 'CA13_analysis_report.txt'
        
        with open(report_path, 'w') as f:
            f.write("CA-13 Congressional District Analysis Report\n")
            f.write("=" * 50 + "\n\n")
            
            total_cvap = sum(d['cvap'] for d in self.demographics.values())
            total_expected_voters = sum(d['cvap'] * d['turnout_rate'] for d in self.demographics.values())
            
            f.write(f"Total CVAP: {total_cvap:,.0f}\n")
            f.write(f"Expected Voters: {total_expected_voters:,.0f}\n")
            f.write(f"Overall Expected Turnout: {(total_expected_voters/total_cvap)*100:.1f}%\n\n")
            
            f.write("Demographic Analysis:\n")
            f.write("-" * 20 + "\n")
            for group, data in self.demographics.items():
                f.write(f"\n{group}:\n")
                f.write(f"  CVAP: {data['cvap']:,.0f}\n")
                f.write(f"  Expected Turnout: {data['cvap'] * data['turnout_rate']:,.0f}\n")
                f.write(f"  Turnout Rate: {data['turnout_rate']*100:.1f}%\n")
                f.write(f"  Share of Total CVAP: {(data['cvap']/total_cvap)*100:.1f}%\n")
                f.write(f"  Share of Expected Voters: {(data['cvap']*data['turnout_rate']/total_expected_voters)*100:.1f}%\n")
        
        print(f"\nSaved detailed analysis report to: {report_path}")

if __name__ == "__main__":
    print("CA-13 Enhanced Data Exploration")
    print("=" * 50)
    
    explorer = CA13EnhancedExplorer()
    explorer.create_turnout_analysis()
    explorer.create_comparative_analysis()
    explorer.create_combined_report()


